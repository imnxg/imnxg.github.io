<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/02/26/javascript-bi-ji/"/>
      <url>2021/02/26/javascript-bi-ji/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">title: Hello Worlddata: 2021-03-01img: https://wx2.sinaimg.cn/mw690/007wCCI7ly1gnlt0gsspkj33kg1ls4qr.jpgcover: truecoverImg: https://pixabay.com/images/id-6082017/tags:   - JavaScript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript负责页面中的的行为。</p><p>它是一门运行在浏览器端的脚本语言。</p><h2 id="JS的编写的位置"><a href="#JS的编写的位置" class="headerlink" title="JS的编写的位置"></a>JS的编写的位置</h2><p>1.可以编写到标签的指定属性中</p><pre class="line-numbers language-none"><code class="language-none">&lt;button onclick="alert('hello');"&gt;我是按钮&lt;/button&gt;  &lt;a href="javascript:alert('aaa');"&gt;超链接&lt;/a&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.可以编写到script标签中</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript"&gt;  //编写js代码  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.可以将代码编写到外部的js文件中，然后通过标签将其引入</p><p>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略 ,如果需要则可以在创建一个新的script标签用于编写内部代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript" src="文件路径"&gt;&lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><pre class="line-numbers language-none"><code class="language-none">alert("要输出的内容");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句会在浏览器窗口中弹出一个警告框</p><pre class="line-numbers language-none"><code class="language-none">document.write("要输出的内容");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该内容将会被写到body标签中，并在页面中显示</p><pre class="line-numbers language-none"><code class="language-none">console.log("要输出的内容");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该内容会被写到开发者工具的控制台中</p><h2 id="基本的语法"><a href="#基本的语法" class="headerlink" title="基本的语法"></a>基本的语法</h2><p>js函数声明不需要；分号，但是赋值语句要加；分号</p><pre class="line-numbers language-none"><code class="language-none">function functionName(arg0,arg1,arg2){  //函数声明  }  var functionName=function(arg0,arg1,arg2){  //函数表达式  };(注意分号)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释</p><p>单行注释</p><pre class="line-numbers language-none"><code class="language-none">//注释内容  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释</p><pre class="line-numbers language-none"><code class="language-none">/*  注释内容  */  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JS严格区分大小写</p><p>JS中每条语句以分号(;)结尾如果不写分号，浏览器会自动添加，但是会消耗一些系统资源， 而且有些时候，浏览器会加错分号，所以在开发中分号必须写</p><p>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。</p><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量实际上就是一些固定的值，比如 1 2 3 4  true  false  null  NaN  “hello”<br><strong>字面量都是不可以改变的。</strong></p><p>由于字面量不是很方便使用，所以在JS中很少直接使用字面量</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量可以用来保存字面量，并且可以保存任意的字面量</p><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述</p><p>声明变量</p><p>使用var关键字来声明一个变量</p><pre class="line-numbers language-none"><code class="language-none">var a;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为变量赋值</p><pre class="line-numbers language-none"><code class="language-none">a = 1; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>声明和赋值同时进行</p><pre class="line-numbers language-none"><code class="language-none">var a = 456;   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在JS中所有的可以自主命名的内容，都可以认为是一个标识符，<br>是标识符就应该遵守标识符的规范。</p><p>比如：变量名、函数名、属性名</p><p>规范：<br>1.标识符中可以含有字母、数字、_、$<br>2.标识符不能以数字开头<br>3.标识符不能是JS中的关键字和保留字<br>4.标识符一般采用驼峰命名法<br>xxxYyyZzz</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>数据类型指的就是字面量的类型</p><h2 id="六种数据类型"><a href="#六种数据类型" class="headerlink" title="六种数据类型"></a>六种数据类型</h2><p><strong>JS中一共分成六种数据类型 5种基本数据类型+object</strong><br>String  字符串<br>Number  数值<br>Boolean  布尔值<br>Null  空值<br>Undefined  未定义<br>Object  对象</p><p>其中string、number、Boolean、null、undefined为5种基本数据类型，而object属于引用数据类型</p><p><strong>typeof运算符检查数据类型</strong></p><p>可以使用一个运算符typeof来检查一个变量的类型</p><p>语法：typeof  变量</p><p>检查字符串时，会返回string</p><p>检查数值时会返回number</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面是详细说明各数据类型</p><h3 id="1-String-字符串"><a href="#1-String-字符串" class="headerlink" title="1.String 字符串"></a>1.String 字符串</h3><p>JS中的字符串需要使用引号引起来，双引号或单引号都行<br>在字符串中转义字符的使用</p><pre class="line-numbers language-none"><code class="language-none">\   ==&gt; 转义字符\'  ==&gt; '  \"  ==&gt; "  \n  ==&gt; 换行  \t  ==&gt; 制表符  \\  ==&gt; \  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用typeof运算符检查字符串时，会返回”string”</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-Number-数值"><a href="#2-Number-数值" class="headerlink" title="2.Number 数值"></a>2.Number 数值</h3><p><strong>JS中所有的整数和浮点数（小数）都是Number类型</strong></p><p>数字的最大能表示的值：Number.MAX_VALUE= 1.7976931348623157e+308</p><p>数字的最大能表示的值：Number.MIN_VALUE=5e-324</p><p>注：1.2e+308是科学计数法表示1.2乘以10的308次方</p><p>如果使用Number表示的数值超过了最大值，则会返回一个Infinity</p><p> Infinity是字面量</p><p>特殊的数字：能赋值给变量</p><p>Infinity  正无穷    a = Infinity ,能赋值<br>-Infinity  负无穷<br>NaN 非法数字（Not A Number）——–是一个 特殊的数字<br>其他进制的数字的表示：<br>0b 开头表示二进制，但是不是所有的浏览器都支持<br>0 开头表示八进制<br>0x 开头表示十六进制</p><p>使用typeof检查一个Number类型的数据时，会返回”number”<br>（包括NaN 和 Infinity）</p><h3 id="3-Boolean-布尔值"><a href="#3-Boolean-布尔值" class="headerlink" title="3.Boolean 布尔值"></a>3.Boolean 布尔值</h3><p>布尔值主要用来进行逻辑判断，布尔值只有两个<br>true 逻辑的真<br>false 逻辑的假<br>使用typeof检查一个布尔值时，会返回”boolean”</p><h3 id="4-Null-空值"><a href="#4-Null-空值" class="headerlink" title="4.Null 空值"></a>4.Null 空值</h3><p>空值专门用来表示为<strong>空的对象</strong>，Null类型的值只有一个<br>null<br>使用typeof检查一个Null类型的值时会返回”object”</p><h3 id="5-Undefined-未定义"><a href="#5-Undefined-未定义" class="headerlink" title="5.Undefined 未定义"></a>5.Undefined 未定义</h3><p><strong>如果声明一个变量，但是并不给变量赋值，此时变量的值就是undefined</strong><br>该类型的值只有一个 undefined<br>使用typeof检查一个Undefined类型的值时，会返回”undefined”</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>Object 对象</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类型转换主要指，将其他的数据类型转换为string、number、Boolean</p><p>类型转换就是指将其他的数据类型，转换为String Number 或 Boolean</p><h3 id="转换为String"><a href="#转换为String" class="headerlink" title="转换为String"></a>转换为String</h3><p>强制 类型转换指将一个数据类型强制转换为其他·的数据类型</p><h4 id="方式一（强制类型转换）："><a href="#方式一（强制类型转换）：" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p><strong>调用被转换数据的toString()方法</strong></p><p>调用xxx的yyy()方法，就是xxx.yyy()</p><p>eg：</p><pre class="line-numbers language-none"><code class="language-none">var a = 123;a = a.toString(); //调用a的toString()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该方法不会影响到原变量，它会将转换的结果返回</p><p>但注意：<code>**这个方法不适用于null和undefined**</code><br><code>由于这两个类型的数据中没有方法，所以调用toString()时会报错</code></p><p>eg</p><pre class="line-numbers language-none"><code class="language-none">var a=233;a = a.toString();a = null;//a = a.toString(); //会报错a = undefine;//a = a.toString(); //会报错console.log(typeof a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式二（强制类型转换）："><a href="#方式二（强制类型转换）：" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h4><p><strong>调用String()函数</strong></p><p>调用String()函数，并将被转换的数据作为参数传递给函数</p><p>使用String()函数做强制转换时，对于Number·和·Boolean实际上就是调用toString()方法</p><p>但是对于null和undefined，就不会调用toString()方法</p><p>​                它会将null 直接转换为 “null”</p><p>​                将会undefined 直接转换为“undefined”</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = 123;  a = String(a);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：<strong>对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”</strong></p><h4 id="方式三（隐式的类型转换）"><a href="#方式三（隐式的类型转换）" class="headerlink" title="方式三（隐式的类型转换）:"></a>方式三（隐式的类型转换）:</h4><p><strong>为任意的数据类型 +””</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = true;  a = a + ""; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：和String()函数一样</p><h3 id="转换为Number"><a href="#转换为Number" class="headerlink" title="转换为Number"></a>转换为Number</h3><h4 id="方式一（强制类型转换）：-1"><a href="#方式一（强制类型转换）：-1" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p><strong>调用Number()函数</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var s = "123";  s = Number(s); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换的情况：</p><ol><li>字符串  –&gt;  数字<br>如果字符串是一个合法的数字(纯数字），则直接转换为对应的数字<br>如果字符串是一个非法的数字（非数字的内容），则转换为NaN<br>如果是一个空串或纯空格的字符串（全是空格的字符），则转换为0</li><li>布尔值  –&gt;  数字<br>true转换为1<br>false转换为0</li><li>空值  –&gt;  数字<br>null转换为0</li><li>未定义 &gt; 数字<br>undefined 转换为NaN</li></ol><h4 id="方式二（强制类型转换）：-1"><a href="#方式二（强制类型转换）：-1" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h4><p>调用parseInt()或parseFloat()<br>这两个函数<strong>专门</strong>用来将一个<strong>字符串转换为数字</strong>的</p><p>如果对非String使用parseInt()或parseFloat()，它会<strong>先将其转换为String</strong>然后在操作 parseInt()<br>可以将<strong>一个字符串中的有效的整数位</strong>提取出来，并转换为Number<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">//parse为解析，int为整型//调用parseInt()函数将a转换为Numbervar a = "123.456px";  a = parseInt(a); //123  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要可以在parseInt()中指定一个第二个参数，来指定进制parseFloat()可以将一个<strong>字符串中的有效的小数位</strong>提取出来，并转换为Number<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">//parseFloat()作用和parseInt()类似，不同的是它可以获得有效的小数var a = "123.456px";  a = parseFloat(a); //123.456  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果对非String使用parseInt()或parseFloat(),它会先将其转换为String，然后再操作</p><p>eg：</p><pre class="line-numbers language-none"><code class="language-none">a = true;a = parseInt(a);console.log(typeof a);//检查类型就字符串console.log(a);//输出的是NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式三（隐式的类型转换）："><a href="#方式三（隐式的类型转换）：" class="headerlink" title="方式三（隐式的类型转换）："></a>方式三（隐式的类型转换）：</h4><p>使用一元的+来进行隐式的类型转换<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = "123";  a = +a;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>原理：和Number()函数一样</strong></p><h3 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字"></a>其他进制的数字</h3><p>在js中，如果需要表示16进制的数字，则需要以0x开头</p><p>​                如果需要表示8进制的数字，则需要以0开头</p><p>​                如果需要表示2进制的数字，则需要以0b开头</p><p>​                                    但是不是所有的浏览器都支持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token comment">//十六进制</span>a <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0xCafe</span><span class="token punctuation">;</span><span class="token comment">//八进制</span>a <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span><span class="token comment">//二进制</span><span class="token comment">// a = 0b10;</span><span class="token comment">//像“070“这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析</span>a <span class="token operator">=</span> <span class="token string">"070"</span><span class="token punctuation">;</span><span class="token comment">//可以在parseInt()中传递一个第二个参数，来指定数字的进制</span><span class="token comment">//parseInt(参数，指定进制)</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><h4 id="方式一（强制类型转换）：-2"><a href="#方式一（强制类型转换）：-2" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p>使用Boolean()函数<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var s = "false";  s = Boolean(s); //true <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换的情况<br>字符串 —&gt; 布尔<br>除了空串其余全是true</p><p>数值 —&gt; 布尔<br>除了0和NaN其余的全是true</p><p>null、undefined —&gt; 布尔<br>都是false</p><p>对象 —&gt; 布尔<br>都是true</p><h4 id="方式二（隐式类型转换）："><a href="#方式二（隐式类型转换）：" class="headerlink" title="方式二（隐式类型转换）："></a>方式二（隐式类型转换）：</h4><p><strong>为任意的数据类型做两次非运算，即可将其转换为布尔值</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = "hello";  a = !!a; //true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符也称为操作符<br>通过运算符可以对一个或多个值进行运算或操作</p><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><p>用来检查（获取）一个变量的数据类型<br>语法：typeof 变量<br>它会返回一个用于描述类型的字符串作为结果</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+ 对两个值进行加法运算并返回结果<br>- 对两个值进行减法运算并返回结果<br>* 对两个值进行乘法运算并返回结果<br>/ 对两个值进行除法运算并返回结果<br>% 对两个值进行取余运算并返回结果</p><p><strong>除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。</strong><br>而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。<br>任何值和字符串做加法，都会先转换为字符串，然后再拼串</p><pre class="line-numbers language-none"><code class="language-none">var result = 123;result = 1+2+"3;//33result = "1"+2+3;//123rsult = 1+"12";//会先转换为字符串，然后再拼串console.log(result);//返回的值为112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>一元运算符只需要一个操作数</p><h4 id="一元的"><a href="#一元的" class="headerlink" title="一元的+"></a>一元的+</h4><p>就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = true;  a = +a;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="一元的-1"><a href="#一元的-1" class="headerlink" title="一元的-"></a>一元的-</h4><p>就是负号，可以对一个数字进行符号位取反<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = 10;  a = a;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><p>自增可以使变量在原值的基础上自增1<br>自增使用 ++<br>自增可以使用 前++（++a）后++(a++)<br>无论是++a 还是 a++都会立即使原变量自增1<br>不同的是++a 和 a++的值是不同的，<br>++a的值是变量的新值（自增后的值）<br>a++的值是变量的原值（自增前的值）</p><pre class="line-numbers language-none"><code class="language-none">var d = 10;//第一次d++，是在10的基础上自增console.log(d++);//11//第二次d++，是在11的基础上自增d++;//10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h4><p>自减可以使变量在原值的基础上自减1<br>自减使用  –<br>自减可以使用 前–（–a）后–(a–)<br>无论是–a 还是 a– 都会立即使原变量自减1<br>不同的是–a- 和 a–的值是不同的，<br>–a的值是变量的新值（自减后的值）<br>a–的值是变量的原值（自减前的值）</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>!<br>非运算可以对一个布尔值进行取反，true变false false边true<br>当对非布尔值使用!时，会先将其转换为布尔值然后再取反<br>我们可以利用!来将其他的数据类型转换为布尔值</p><p>&amp;&amp;<br>&amp;&amp;可以对符号两侧的值进行与运算<br>只有两端的值都为true时，才会返回true。只要有一个false就会返回false。<br>与是一个短路的与，如果第一个值是false，则不再检查第二个值<br>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>规则：<br>1.如果第一个值为false，则返回第一个值<br>2.如果第一个值为true，则返回第二个值</p><p>||<br>||可以对符号两侧的值进行或运算<br>只有两端都是false时，才会返回false。只要有一个true，就会返回true。<br>或是一个短路的或，如果第一个值是true，则不再检查第二个值<br>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>规则：<br>1.如果第一个值为true，则返回第一个值<br>2.如果第一个值为false，则返回第二个值</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=<br>可以将符号右侧的值赋值给左侧变量<br>+=</p><pre class="line-numbers language-none"><code class="language-none">a += 5 相当于 a = a+5    var str = "hello";  str += "world";  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-=</p><pre class="line-numbers language-none"><code class="language-none">a -= 5  相当于 a = a-5  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*=</p><pre class="line-numbers language-none"><code class="language-none">a *= 5 相当于 a = a*5  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>/=</p><pre class="line-numbers language-none"><code class="language-none">a /= 5 相当于 a = a/5  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>%=</p><pre class="line-numbers language-none"><code class="language-none">a %= 5 相当于 a = a%5 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符用来比较两个值之间的大小关系的<br>&gt;<br>&gt;=<br>&lt;<br>&lt;=<br>关系运算符的规则和数学中一致，用来比较两个值之间的关系，<br>如果关系成立则返回true，关系不成立则返回false。<br>如果比较的两个值是非数值，会将其转换为Number然后再比较。<br>如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。</p><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h3><p>相等，判断左右两个值是否相等，如果相等返回true，如果不等返回false<br>相等会自动对两个值进行类型转换，如果<strong>对不同的类型进行比较，会将其转换为相同的类型然后再比较</strong>，转换后相等它也会返回true，null == undifined</p><p>!=<br>不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false<br>不等也会做自动的类型转换。</p><p><strong>===</strong><br><strong>全等</strong>，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，<br>如果两个值的类型不同，则直接返回false</p><p>!==<br><strong>不全等</strong>，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true</p><p>特殊的值：<br>null和undefined<br>由于undefined衍生自null，所以<strong>null == undefined</strong> 会返回true。<br>但是 null === undefined 会返回false。<br><strong>NaN</strong><br>NaN不与任何值相等，报告它自身 NaN == NaN //false</p><p>判断一个值是否是NaN<br>使用isNaN()函数</p><h3 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h3><p>?:<br>语法：条件表达式?语句1:语句2;<br>执行流程：<br>先对条件表达式求值判断，<br>如果判断结果为true，则执行语句1，并返回执行结果<br>如果判断结果为false，则执行语句2，并返回执行结果</p><p>优先级：<br>和数学中一样，JS中的运算符也是具有优先级的，<br>比如 先乘除 后加减 先与 后或<br>具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，<br>优先级越高的越优先计算，优先级相同的，从左往右计算。<br>优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。</p><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>程序都是自上向下的顺序执行的，<br>通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。</p><h3 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h3><p>条件判断语句也称为if语句<br>语法一：</p><pre class="line-numbers language-none"><code class="language-none">if(条件表达式){  语句...  }   执行流程：   if语句执行时，会先对条件表达式进行求值判断，   如果值为true，则执行if后的语句   如果值为false，则不执行  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法二：</p><pre class="line-numbers language-none"><code class="language-none">if(条件表达式){  语句...  }else{  语句...  }  执行流程：  if...else语句执行时，会对条件表达式进行求值判断，  如果值为true，则执行if后的语句  如果值为false，则执行else后的语句  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法三：</p><pre class="line-numbers language-none"><code class="language-none">if(条件表达式){  语句...  }else if(条件表达式){  语句...  }else if(条件表达式){  语句...  }else if(条件表达式){  语句...  }else{  语句...  }   执行流程   if...else if...else语句执行时，会自上至下依次对条件表达式进行求值判断，  如果判断结果为true，则执行当前if后的语句，执行完成后语句结束。  如果判断结果为false，则继续向下判断，直到找到为true的为止。  如果所有的条件表达式都是false，则执行else后的语句  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.条件分支语句<br>switch语句<br>语法:</p><pre class="line-numbers language-none"><code class="language-none">switch(条件表达式){  case 表达式:  语句...  break;  case 表达式:  语句...  break;  case 表达式:  语句...  break;  default:  语句...  break;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行流程：<br>switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，<br>如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。<br>如果所有的case判断结果都为false，则从default处开始执行代码。</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>通过循环语句可以反复执行某些语句多次<br>while循环<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">while(条件表达式){      语句...  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程：<br>while语句在执行时，会先对条件表达式进行求值判断，<br>如果判断结果为false，则终止循环<br>如果判断结果为true，则执行循环体<br>循环体执行完毕，继续对条件表达式进行求值判断，依此类推</p><p>do…while循环<br>语法:</p><pre class="line-numbers language-none"><code class="language-none">do{  语句...  }while(条件表达式)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程<br>do…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，<br>如果判断判断结果为false，则终止循环。<br>如果判断结果为true，则继续执行循环体，依此类推</p><p>和while的区别：<br>while：先判断后执行<br>do…while: 先执行后判断<br>do…while可以确保循环体至少执行一次。</p><p>for循环<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">for(①初始化表达式 ; ②条件表达式 ; ④更新表达式){      ③语句...  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程：<br>首先执行①初始化表达式，初始化一个变量，<br>然后对②条件表达式进行求值判断，如果为false则终止循环<br>如果判断结果为true，则执行③循环体<br>循环体执行完毕，执行④更新表达式，对变量进行更新。<br>更新表达式执行完毕重复②</p><p>死循环</p><pre class="line-numbers language-none"><code class="language-none">while(true){  }  for(;;){  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h1><p>对象是JS中的引用数据类型<br><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong><br>使用typeof检查一个对象时，会返回object</p><h2 id="对象的分类："><a href="#对象的分类：" class="headerlink" title="对象的分类："></a>对象的分类：</h2><p>1.内建对象<br>- 由ES标准中定义的对象，在任何的ES的实现中都可以使用<br>- 比如：Math String Number Boolean Function Object….</p><p>2.宿主对象<br>- 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象<br>- 比如 BOM DOM</p><p>3.自定义对象</p><pre class="line-numbers language-none"><code class="language-none">- 由开发人员自己创建的对象  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建对象<br>方式一：</p><pre class="line-numbers language-none"><code class="language-none">var obj = new Object();  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式二：</p><pre class="line-numbers language-none"><code class="language-none">var obj = {}; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>向对象中添加属性</strong><br>语法：<br>对象.属性名 = 属性值;<br><strong>对象[“属性名”] = 属性值;</strong> //这种方式能够使用特殊的属性名</p><p><strong>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</strong><br>属性值也可以任意的数据类型。</p><p>读取对象中的属性<br>语法：<br>对象.属性名<br>对象[“属性名”] //“属性名”可以使字符串常量，也可以是字符串变量<br>如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined</p><p><strong>删除对象中的属性</strong><br>语法：</p><pre class="line-numbers language-none"><code class="language-none">delete 对象.属性名  delete 对象["属性名"]  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p><strong>使用in检查对象中是否含有指定属性</strong><br>语法：”属性名” in 对象<br>如果在对象中含有该属性，则返回true<br>如果没有则返回false</p><pre class="line-numbers language-none"><code class="language-none">  循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).  var obj = {'0':'a','1':'b','2':'c'};    for(var i in obj) {       console.log(i,":",obj[i]);  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用对象字面量，在创建对象时直接向对象中添加属性</strong><br>语法：</p><pre class="line-numbers language-none"><code class="language-none">var obj = {      属性名:属性值,      属性名:属性值,      属性名:属性值,      属性名:属性值  } <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本数据类型和引用数据类型<br>基本数据类型<br>String Number Boolean Null Undefined<br>引用数据类型<br>Object<br><strong>基本数据类型的数据，变量是直接保存的它的值。</strong><br>变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。<br><strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong><br>如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br>比较两个变量时，对于基本数据类型，比较的就是值，<br>对于引用数据类型比较的是地址，地址相同才相同</p><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）</strong><br>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码<br>使用typeof检查一个函数时会返回function<br>创建函数<br>函数声明</p><pre class="line-numbers language-none"><code class="language-none">function 函数名([形参1,形参2...形参N]){  语句...  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数表达式</p><pre class="line-numbers language-none"><code class="language-none">var 函数名 = function([形参1,形参2...形参N]){  语句...  };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用函数<br>语法：函数对象([实参1,实参2…实参N]);<br>fun() sum() alert() Number() parseInt()<br>当我们调用函数时，函数中封装的代码会按照编写的顺序执行</p><p><strong>立即执行函数</strong><br>函数定义完，立即被调用，这种函数叫做立即执行函数<br>立即执行函数往往只会执行一次</p><pre class="line-numbers language-none"><code class="language-none">(function(a,b){      console.log("a = "+a);      console.log("b = "+b);  })(123,456); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>遍历对象</p><pre class="line-numbers language-none"><code class="language-none">for(var v in obj){      document.write("property：name ="+v+"value="+obj[v]+"&lt;br/&gt;" );  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>形参和实参<br>形参：形式参数<br>定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开<br>定义形参就相当于在函数内声明了对应的变量但是并不赋值，<br>形参会在调用时才赋值。</p><p>实参：实际参数<br>调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,<br>调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。<br><strong>如果实参的数量大于形参，多余实参将不会赋值，</strong><br><strong>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</strong></p><p><strong>返回值，就是函数执行的结果。</strong><br>使用return 来设置函数的返回值。<br>语法：return 值;<br>该值就会成为函数的返回值，可以通过一个变量来接收返回值<br>return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。<br>return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。<br><strong>如果return后不跟值，或者是不写return则函数默认返回undefined。</strong><br>break、continue和return<br>break<br>退出循环<br>continue<br>跳过当次循环<br>return<br>退出函数</p><p><strong>参数，函数的实参也可以是任意的数据类型。</strong></p><p><strong>方法（method）</strong><br>可以将一个函数设置为一个对象的属性，<br>当一个对象的属性是一个函数时，<br>我们称这个函数是该对象的方法。<br>对象.方法名();<br>函数名()</p><h3 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h3><p>call()<br>apply()<br><strong>这两个方法都是函数对象的方法需要通过函数对象来调用</strong><br>通过两个方法可以直接调用函数，并且<strong>可以通过第一个实参来指定函数中this</strong><br>不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<br><strong>arguments</strong><br>arguments和this类似，都是函数中的隐含的参数<br>arguments是一个类数组元素，它用来封装函数执行过程中的实参<br>所以即使不定义形参，也可以通过arguments来使用实参<br><strong>arguments中有一个属性callee表示当前执行的函数对象</strong></p><p>this（调用函数的那个对象）<br>this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this是调用方法的对象<br>3.以构造函数的形式调用时，this是新建的那个对象<br>4.使用call和apply调用时，this是指定的那个对象<br>5.在全局作用域中this代表window</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域简单来说就是一个变量的作用范围。<br>在JS中作用域分成两种：</p><p>1.全局作用域</p><p>直接在script标签中编写的代码都运行在全局作用域中<br><strong>全局作用域在打开页面时创建，在页面关闭时销毁。</strong><br>全局作用域中有一个全局对象window，window对象由浏览器提供，<br>可以在页面中直接使用，它代表的是整个的浏览器的窗口。<br><strong>在全局作用域中创建的变量都会作为window对象的属性保存</strong><br>在全局作用域中创建的函数都会作为window对象的方法保存<br>在全局作用域中创建的变量和函数可以在页面的任意位置访问。<br>在函数作用域中也可以访问到全局作用域的变量。<br>尽量不要在全局中创建变量</p><p>2.函数作用域</p><p>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。<br>函数作用域在函数执行时创建，在函数执行结束时销毁。<br>在函数作用域中创建的变量，不能在全局中访问。<br>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，<br>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，<br>如果找到了则使用，找不到则继续向上找，一直会</p><p><strong>变量的声明提前</strong><br>在全局作用域中，使用<strong>var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。</strong><br>所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。<br>在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，<br>如果没有使用var关键字声明变量，则变量会变成全局变量</p><p><strong>函数的声明提前</strong><br>在全局作用域中，使用<strong>函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建</strong>，<br>也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性<br>在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。</p><h2 id="this（上下文对象）"><a href="#this（上下文对象）" class="headerlink" title="this（上下文对象）"></a>this（上下文对象）</h2><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。</p><p>指向当前对象</p><p>this的不同的情况：<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this就是调用方法的对象<br>3.以构造函数的形式调用时，this就是新创建的对象</p><h2 id="4-构造函数"><a href="#4-构造函数" class="headerlink" title="4.构造函数"></a>4.构造函数</h2><p>构造函数是专门用来创建对象的函数<br><strong>一个构造函数我们也可以称为一个类</strong><br>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br>通过同一个构造函数创建的对象，我们称为一类对象<br>构造函数就是一个普通的函数，只是他的调用方式不同，<br>如果直接调用，它就是一个普通函数<br>如果使用new来调用，则它就是一个构造函数</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">function Person(name , age , gender){      this.name = name;      this.age = age;      this.gender = gender;      this.sayName = function(){          alert(this.name);      };  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数的执行流程：<br>1.创建一个新的对象<br>2.将新的对象作为函数的上下文对象（this）<br>3.执行函数中的代码<br>4.将新建的对象返回</p><p><strong>instanceof 用来检查一个对象是否是一个类的实例</strong><br>语法：对象 instanceof 构造函数<br>如果该对象时构造函数的实例，则返回true，否则返回false<br><strong>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</strong></p><p>枚举对象中的属性<br>for…in<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">for(var 属性名 in 对象){    }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，<br>每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性</p><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>创建一个函数以后，<strong>解析器都会默认在函数中添加一个数prototype</strong><br>prototype属性指向的是一个对象，这个对象我们称为原型对象。<br>当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性执行该原型对象。</strong></p><pre class="line-numbers language-none"><code class="language-none">这个隐含的属性可以通过对象.__proto__来访问。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong><br>我们可以将对象中共有的属性和方法统一添加到原型对象中，<br>这样我们只需要添加一次，就可以使所有的对象都可以使用。<br>当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，<br>如果在自身中找到了，则直接使用。<br>如果没有找到，则去原型对象中寻找，如果找到了则使用，<br><strong>如果没有找到，则去原型的原型中寻找，\</strong>依此类推。直到找到Object的原型为止，Object的原型的原型为null，<br>如果依然没有找到则返回undefined<br>**hasOwnProperty()**<br>这个方法可以用来检查**对象自身中**是否含有某个属性<br>语法：对象.hasOwnProperty(“属性名”)</p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</p><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法</p><pre class="line-numbers language-none"><code class="language-none">//修改Person原型的toString  Person.prototype.toString = function(){  return "Person[name="+this.name+",age="+this.age+",gender="+this.gender+"]";  };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾<br>这些垃圾积攒过多以后，会导致程序运行的速度过慢，<br>所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾<br>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，<br>此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，<br>所以这种垃圾必须进行清理。<br>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，<br>我们不需要也不能进行垃圾回收的操作<br>我们需要做的只是要将不再使用的对象设置null即可</p><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组也是一个对象，是一个用来存储数据的对象和Object类似，但是它的存储效率比普通对象要高<br>数组中保存的内容我们称为元素<br>数组使用索引（index）来操作元素<br>索引指由0开始的整数</p><h2 id="数组的操作："><a href="#数组的操作：" class="headerlink" title="数组的操作："></a>数组的操作：</h2><p>创建数组</p><pre class="line-numbers language-none"><code class="language-none">var arr = new Array();  var arr = [];  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向数组中添加元素<br>语法；<br>数组对象[索引] = 值;</p><pre class="line-numbers language-none"><code class="language-none">arr[0] = 123;  arr[1] = "hello";  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建数组时直接添加元素<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">var arr = [元素1,元素2....元素N]; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">var arr = [123,"hello",true,null];  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取和修改数组的长度<br>使用length属性来操作数组的长度<br>获取长度：<br>数组.length<br>length获取到的是数组的最大索引+1<br>对于连续的数组，length获取到的就是数组中元素的个数<br>修改数组的长度<br>数组.length = 新长度<br>如果修改后的length大于原长度，则多出的部分会空出来<br>如果修改后的length小于原长度，则原数组中多出的元素会被删除<br>向数组的最后添加元素<br>数组[数组.length] = 值;</p><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><table><thead><tr><th>functionName</th><th>function</th><th>usage</th></tr></thead><tbody><tr><td>push()</td><td>用来向数组的末尾添加一个或多个元素，并返回数组新的长度</td><td>语法：数组.push(元素1,元素2,元素N)pop()</td></tr><tr><td>pop()</td><td>用来删除数组的最后一个元素，并返回被删除的元素</td><td></td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回数组的新的长度</td><td></td></tr><tr><td>shift()</td><td>删除数组的开头的一个元素，并返回被删除的元素</td><td></td></tr><tr><td>reverse()</td><td>可以用来反转一个数组，它会对原数组产生影响</td><td></td></tr><tr><td>concat()</td><td>可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="slice-sart-end"><a href="#slice-sart-end" class="headerlink" title="slice(sart,[end])"></a>slice(sart,[end])</h3><pre class="line-numbers language-none"><code class="language-none">可以从一个数组中截取指定的元素  该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回  参数：  1.截取开始位置的索引（包括开始位置）  2.截取结束位置的索引（不包括结束位置）   第二个参数可以省略不写，如果不写则一直截取到最后   参数可以传递一个负值，如果是负值，则从后往前数  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><pre class="line-numbers language-none"><code class="language-none">可以用来删除数组中指定元素，并使用新的元素替换  该方法会将删除的元素封装到新数组中返回  参数：  1.删除开始位置的索引  2.删除的个数  3.三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-splitor"><a href="#join-splitor" class="headerlink" title="join([splitor])"></a>join([splitor])</h3><p>可以将一个数组转换为一个字符串<br>参数：<br>需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素<br>如果不指定连接符则默认使用,</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序<br>调用以后，会直接修改原数组。<br>可以自己指定排序的规则，需要一个回调函数作为参数：</p><p>我们可以自己来指定排序的规则<br>我们可以在sort()添加一个回调函数，来指定排序规则，<br>回调函数中需要定义两个形参,<br>浏览器将会分别使用数组中的元素作为实参去调用回调函数<br>使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边</p><ul><li>浏览器会根据回调函数的返回值来决定元素的顺序，<br>如果返回一个大于0的值，则元素会交换位置<br>如果返回一个小于0的值，则元素位置不变<br>如果返回一个0，则认为两个元素相等，也不交换位置</li><li>如果需要升序排列，则返回 a-b<br>如果需要降序排列，则返回b-a</li></ul><pre class="line-numbers language-none"><code class="language-none">function(a,b){  //升序排列  //return a-b;    //降序排列  return b-a;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>遍历数组就是将数组中元素都获取到<br>一般情况我们都是使用for循环来遍历数组</p><pre class="line-numbers language-none"><code class="language-none">for(var i=0 ; i&lt;数组.length ; i++){      //数组[i]  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用forEach()方法来遍历数组（不兼容IE8）</p><pre class="line-numbers language-none"><code class="language-none">数组.forEach(function(value , index , obj){    });  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>forEach()方法需要一个回调函数作为参数，<br>数组中有几个元素，回调函数就会被调用几次，<br>每次调用时，都会将遍历到的信息以实参的形式传递进来，<br>我们可以定义形参来获取这些信息。<br>value:正在遍历的元素<br>index:正在遍历元素的索引<br>obj:被遍历对象</p><h1 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>在JS中为我们提供了<strong>三个包装类：</strong><br>String() Boolean() Number()<br>通过这三个包装类可以创建基本数据类型的对象<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var num = new Number(2);  var str = new String("hello");  var bool = new Boolean(true); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是在实际应用中千万不要这么干。</p><p>当我们去操作一个基本数据类型的属性和方法时，<br><strong>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</strong><br>操作完成以后再将这个临时对象进行销毁。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>日期的对象，在JS中通过Date对象来表示一个时间<br>创建对象<br>创建一个当前的时间对象</p><pre class="line-numbers language-none"><code class="language-none">var d = new Date();  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个指定的时间对象</p><pre class="line-numbers language-none"><code class="language-none">var d = new Date("月/日/年 时:分:秒");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><table><thead><tr><th>name</th><th></th></tr></thead><tbody><tr><td>getDate()</td><td>当前日期对象是几日（1-31）</td></tr><tr><td>getDay()</td><td>返回当前日期对象时周几（0-6） 0 周日 1 周一 。。。</td></tr><tr><td>getMonth()</td><td>返回当前日期对象的月份（0-11） 0 一月 1 二月 。。。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getTime()</td><td>返回当前日期对象的时间戳 时间戳，指的是从1970年月1日 0时0分0秒，<strong>到现在时间的毫秒数</strong> 计算机底层保存时间都是以时间戳的形式保存的。</td></tr><tr><td>Date.now()</td><td>可以获取当前代码执行时的时间戳</td></tr></tbody></table><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法<br>我们可以直接使用它来进行数学运算相关的操作<br>方法：<br>Math.PI<br>常量，圆周率<br>Math.abs()<br>绝对值运算<br>Math.ceil()<br>向上取整<br>Math.floor()<br>向下取整<br>Math.round()<br>四舍五入取整<br>Math.random()<br>生成一个01之间的随机数<br>生成一个xy之间的随机数<br>Math.round(Math.random()*(y-x)+x);<br>Math.pow(x,y)<br>求x的y次幂<br>Math.sqrt()<br>对一个数进行开方<br>Math.max()<br>求多个数中最大值<br>Math.min()<br>求多个数中的最小值</p><h2 id="字符串的相关的方法"><a href="#字符串的相关的方法" class="headerlink" title="字符串的相关的方法"></a>字符串的相关的方法</h2><p>使用ES6中的字符串新方法</p><p><strong>String.prototype.padStart(maxLength, fillString=’’)</strong> 或 **String.prototype.padEnd(maxLength, fillString=’’)**来填充字符串；</p><p>length<br>获取字符串的长度<br>charAt()<br>根据索引获取指定的字符<br>charCodeAt()<br>根据索引获取指定的字符编码<br><strong>String.fromCharCode()</strong><br><strong>根据字符编码获取字符</strong><br>indexOf()<br>lastIndexOf()<br>从一个字符串中检索指定内容<br>需要一个字符串作为参数，这个字符串就是要检索的内容，<br>如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br>可以指定一个第二个参数，来表示开始查找的位置<br>indexOf()是从前向后找<br>lastIndexOf()是从后向前找<br>slice(start,[end])<br>可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量<br>参数：<br>第一个：截取开始的位置（包括开始）<br>第二个：截取结束的位置<strong>（不包括结束）</strong><br>可以省略第二个参数，如果省略则一直截取到最后<br>可以传负数，如果是负数则从后往前数<br>substr()<br>和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量</p><p>substring()<br>和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，<br><strong>substring()中如果第二个参数小于第一个，自动调整位置</strong><br>toLowerCase()<br>将字符串转换为小写并返回<br>toUpperCase()<br>将字符串转换为大写并返回</p><h3 id="正则表达相关方法"><a href="#正则表达相关方法" class="headerlink" title="正则表达相关方法"></a>正则表达相关方法</h3><p><strong>split()</strong><br>可以根据指定内容将一个字符串拆分为一个数组<br>参数：<br>需要一个字符串作为参数，将会根据字符串去拆分数组<br>可以接收一个正则表达式，此时会根据正则表达式去拆分数组</p><p><strong>match()</strong><br>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来<br>默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索<br>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容<br>可以为一个正则表达式设置多个匹配模式，且顺序无所谓<br>match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><p><strong>replace()</strong><br>可以将字符串中指定内容替换为新的内容<br>参数：<br>1.被替换的内容，可以接受一个正则表达式作为参数<br><strong>2.新的内容</strong> 空串则为删除””<br>默认只会替换第一个</p><p>search()<br>可以搜索字符串中是否含有指定内容<br>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回1<br>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串<br>serach()只会查找第一个，即使设置全局匹配也没用</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，<br>也可以将一个字符串中符合规则的内容提取出来。<br><strong>创建正则表达式</strong><br>var reg = new RegExp(“正则”,”匹配模式”); 注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，如果要使用\则需要使用\来代替</p><p>var reg = /正则表达式/匹配模式 （匹配模式可以多个一起写：/gi）</p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>匹配模式：<br>i:忽略大小写（ignore）<br>g:全局匹配模式（默认为1次）<br>设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求</p><p>正则语法<br>| 或<br>[] 或<br>[^ ] 除了</p><pre class="line-numbers language-none"><code class="language-none">**[x-y] x的ascii到y的ascii码之间的值**  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[a-z] 小写字母 <strong>（也可以[e-i])</strong><br>[A-Z] 大写字母<br>[A-z] 任意字母,<strong>但是还包括了其他ASCII在此之中的</strong><br>[0-9] 任意数字</p><p>元符号</p><p>检查一个字符串中是否含有 .<br>. 表示任意字符<br>在正则表达式中使用\作为转义字符<br>. 来表示.<br>\ 表示\</p><p>\w<br>任意字母、数字、_ [A-z0-9_]<br>\W<br>除了字母、数字、_ [ ^A-z0-9_]<br>\d<br>任意的数字 [0-9]<br>\D<br>除了数字 [ ^0-9]<br>\s<br>空格<br>\S<br>除了空格<br>\b<br>单词边界<br>\B<br>除了单词边界</p><p><strong>量词</strong><br>通过量词可以设置一个内容出现的次数<br>量词只对它前边的一个内容起作用<br>{n} 正好出现n次<br>{m,n} 出现mn次<br>{m,} m次以上</p><p>+至少一个，相当于{1,}<br>*个或多个，相当于{0,}<br>? 0个或1个，相当于{0,1}</p><p><strong>边界表达式</strong>（不要在java中用，javaScript中用）<br>^:正则开始<br>$:正则结束 ：<strong>注意结束前一个才是结束匹配</strong></p><pre class="line-numbers language-none"><code class="language-none">reg = /^a/;  reg = /b$/;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h2><p>test()<br>可以用来检查一个字符串是否符合正则表达式<br>如果符合返回true，否则返回false<br>例子</p><p>去掉两端的空格:</p><pre class="line-numbers language-none"><code class="language-none">var s = "        f    afa    ";   s = s.replace(/^\s*|\s*$/g,"");  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>Document Object Model<br>文档对象模型，通过DOM可以来任意来修改网页中各个内容<br>文档<br>文档指的是网页，一个网页就是一个文档<br>对象<br>对象指将网页中的每一个节点都转换为对象<br>转换完对象以后，就可以以一种纯面向对象的形式来操作网页了<br>模型<br>模型用来表示节点和节点之间的关系，方便操作页面<br>节点（Node）<br>节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点<br>虽然都是节点，但是节点的类型却是不同的<br>常用的节点<br>文档节点 （Document），代表整个网页<br>元素节点（Element），代表网页中的标签<br>属性节点（Attribute），代表标签中的属性<br>文本节点（Text），代表网页中的文本内容</p><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p>DOM查询<br>在网页中浏览器已经为我们提供了<strong>document对象</strong>，<br><strong>它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。</strong><br>document查询方法：<br>根据元素的id属性查询一个元素节点对象：<br>document.getElementById(“id属性值”);<br>根据元素的name属性值查询一组元素节点对象:<br>document.getElementsByName(“name属性值”);<br>根据标签名来查询一组元素节点对象：<br>document.getElementsByTagName(“标签名”);</p><p>元素的属性：<br><strong>读取元素的属性：</strong><br>语法：元素.属性名<br>例子：ele.name<br>ele.id<br>ele.value<br>ele.className<br>注意：class属性不能采用这种方式，<br><strong>读取class属性时需要使用 元素.classNam</strong>e</p><p>修改元素的属性：<br>语法：元素.属性名 = 属性值</p><p>innerHTML<br>使用该属性可以获取或设置元素内部的HTML代码</p><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p>事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br>我们可以为事件来绑定回调函数来响应事件。<br>绑定事件的方式：<br>1.可以在标签的事件属性中设置相应的JS代码<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;button onclick="js代码。。。"&gt;按钮&lt;/button&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;button id="btn"&gt;按钮&lt;/button&gt;  &lt;script&gt;      var btn = document.getElementById("btn");      btn.onclick = function(){        };  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文档的加载<br>浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。<br>如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，<br>此时将会无法正常获取到DOM对象，导致DOM操作失败。<br>解决方式一：<br>可以将js代码编写到body的下边</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;button id="btn"&gt;按钮&lt;/button&gt;    &lt;script&gt;  var btn = document.getElementById("btn");  btn.onclick = function(){    };  &lt;/script&gt;  &lt;/body&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方式二：<br>将js代码编写到window.onload = function(){}中<br>window.onload 对应的回调函数会在整个页面加载完毕以后才执行，<br>所以可以确保代码执行时，DOM对象已经加载完毕了</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;      window.onload = function(){          var btn = document.getElementById("btn");          btn.onclick = function(){          };      };  &lt;/script&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h2><p>通过具体的元素节点来查询<br>元素.getElementsByTagName()<br>通过标签名查询当前元素的指定后代元素</p><p><strong>子节点包括便签元素中的文本，子元素自包含标签元素</strong></p><p>元素.childNodes<br>获取当前元素的<strong>所有子节点</strong><br><strong>会获取到空白的文本子节点</strong></p><p>childNodes属性会获取包括文本节点在呢的所有节点<br>根据DOM标签标签间空白也会当成文本节点<br>注意：在IE8及以下的浏览器中，不会将空白文本当成子节点，<br>所以该属性在IE8中会返回4个子元素而其他浏览器是9个</p><p>元素.children<br>获取当前元素的<strong>所有子元素</strong></p><p>元素.firstChild<br>获取当前元素的<strong>第一个子节点</strong>，会获取到空白的文本子节点</p><p>元素.lastChild<br>获取当前元素的<strong>最后一个子节点</strong></p><p>元素.parentNode<br>获取当前元素的父元素</p><p>元素.previousSibling<br>获取当前元素的前一个兄弟节点</p><p>previousElementSibling获取前一个兄弟元素，IE8及以下不支持</p><p>元素.nextSibling<br>获取当前元素的后一个兄弟节点</p><p>firstElementChild获取当前元素的第一个子元素<br>firstElementChild不支持IE8及以下的浏览器，<br>如果需要兼容他们尽量不要使用</p><p>innerHTML和innerText<br>这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性<br>两个属性作用类似，都可以获取到标签内部的内容，<br><strong>不同是innerHTML会获取到html标签，而innerText会自动去除标签</strong><br>如果使用这两个属性来设置标签内部的内容时，没有任何区别的</p><p><strong>读取标签内部的文本内容</strong></p><p>h1中的文本内容</p><p>元素.firstChild.nodeValue</p><h2 id="document对象的其他的属性和方法"><a href="#document对象的其他的属性和方法" class="headerlink" title="document对象的其他的属性和方法"></a>document对象的其他的属性和方法</h2><p>document.all<br><strong>获取页面中的所有元素</strong>，相当于document.getElementsByTagName(“*”);</p><p>document.documentElement<br><strong>获取页面中html根元素</strong></p><p>document.body<br>获取页面中的body元素</p><p>document.getElementsByClassName()<br><strong>根据元素的class属性值查询一组元素节点对象</strong><br>这个方法不支持IE8及以下的浏览器</p><p>document.querySelector()<br><strong>根据CSS选择器去页面中查询一个元素</strong><br>如果匹配到的元素有多个，则它会返回查询到的第一个元素</p><p>document.querySelectorAll()<br>根据CSS选择器去页面中查询一组元素<br>会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个</p><h2 id="DOM修改"><a href="#DOM修改" class="headerlink" title="DOM修改"></a>DOM修改</h2><p>document.createElement(“TagName”)<br>可以用于创建一个元素节点对象，<br>它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，<br>并将创建好的对象作为返回值返回<br>document.createTextNode(“textContent”)<br>可以根据文本内容创建一个文本节点对象</p><p><strong>父节点.appendChild(子节点)</strong><br>向父节点中添加指定的子节点<br><strong>父节点.insertBefore(新节点,旧节点)</strong><br>将一个新的节点插入到旧节点的前边<br>父节点.replaceChild(新节点,旧节点)<br>使用一个新的节点去替换旧节点</p><p><strong>父节点.removeChild(子节点)</strong><br>删除指定的子节点<br>推荐方式：<strong>子节点.parentNode.removeChild(子节点)</strong></p><p><strong>以上方法，实际就是改变了相应元素（标签）的innerHTML的值。</strong></p><pre class="line-numbers language-none"><code class="language-none">myClick("btn07",function(){      //向city中添加广州      var city = document.getElementById("city");        /*  * 使用innerHTML也可以完成DOM的增删改的相关操作  * 一般我们会两种方式结合使用  */      //city.innerHTML += "&lt;li&gt;广州&lt;/li&gt;";        //创建一个li      var li = document.createElement("li");      //向li中设置文本      li.innerHTML = "广州";      //将li添加到city中      city.appendChild(li);    });  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM对CSS的操作"><a href="#DOM对CSS的操作" class="headerlink" title="DOM对CSS的操作"></a>DOM对CSS的操作</h2><h3 id="读取和修改内联样式"><a href="#读取和修改内联样式" class="headerlink" title="读取和修改内联样式"></a>读取和修改内联样式</h3><p>使用style属性来操作元素的内联样式<br>读取内联样式：<br>语法：元素.style.样式名<br>例子：<br>元素.style.width<br>元素.style.height<br>注意：<strong>如果样式名中带有-，则需要将样式名修改为驼峰命名法将-去掉，然后后的字母改大写</strong><br>比如：backgroundcolor &gt; backgroundColor<br>borderwidth &gt; borderWidth<br>修改内联样式：<br>语法：元素.style.样式名 = 样式值<br><strong>通过style修改和读取的样式都是内联样式</strong>，由于内联样式的优先级比较高，<br>所以我们通过JS来修改的样式，往往会立即生效，<br><strong>但是如果样式中设置了!important，则内联样式将不会生效。</strong></p><h3 id="读取元素的当前样式"><a href="#读取元素的当前样式" class="headerlink" title="读取元素的当前样式"></a>读取元素的当前样式</h3><p>正常浏览器<br><strong>使用getComputedStyle()</strong><br>这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式<br>参数：<br>1.要获取样式的元素<br>2.可以传递一个伪元素，一般传null<br>例子：<br>获取元素的宽度<br>getComputedStyle(box , null)[“width”];<br>通过该方法读取到样式都是只读的不能修改</p><p>IE8<br><strong>使用currentStyle</strong><br>语法：<br>元素.currentStyle.样式名<br>例子：<br>box.currentStyle[“width”]<br>通过这个属性读取到的样式是只读的不能修改</p><p><strong>实现兼容性</strong></p><p>//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错</p><pre class="line-numbers language-none"><code class="language-none">/*  * 定义一个函数，用来获取指定元素的当前的样式  * 参数：  * obj 要获取样式的元素  * name 要获取的样式名  */  function getStyle(obj , name){  //对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错      if(window.getComputedStyle){          //正常浏览器的方式，具有getComputedStyle()方法          return getComputedStyle(obj , null)[name];      }else{          //IE8的方式，没有getComputedStyle()方法          return obj.currentStyle[name];      }      //return window.getComputedStyle?getComputedStyle(obj , null)[name]:obj.currentStyle[name];  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他的样式相关的属性"><a href="#其他的样式相关的属性" class="headerlink" title="其他的样式相关的属性"></a>其他的样式相关的属性</h3><p>注意：以下样式都是只读的,未指明偏移量都是相对于当前窗口左上角</p><p>clientHeight<br>元素的可见高度，包括元素的内容区和内边距的高度<br>clientWidth<br>元素的可见宽度，包括元素的内容区和内边距的宽度<br>offsetHeight<br>整个元素的高度，包括内容区、内边距、边框<br>offfsetWidth<br>整个元素的宽度，包括内容区、内边距、边框<br>offsetParent<br>当前元素的定位父元素<br>离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body<br>offsetLeft<br>offsetTop<br>当前元素和定位父元素之间的偏移量<br>offsetLeft水平偏移量 offsetTop垂直偏移量</p><p>scrollHeight<br>scrollWidth<br>获取元素滚动区域的高度和宽度</p><p>scrollTop<br>scrollLeft<br>获取元素垂直和水平滚动条滚动的距离</p><p>判断滚动条是否滚动到底<br>垂直滚动条<br>scrollHeight -scrollTop = clientHeight</p><p>水平滚动<br>scrollWidth -scrollLeft = clientWidth</p><h1 id="事件（Event）-1"><a href="#事件（Event）-1" class="headerlink" title="事件（Event）"></a>事件（Event）</h1><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。。</p><p>可以在响应函数中定义一个形参，来使用事件对象，但是在IE8以下浏览器中事件对象没有做完实参传递，而是作为window对象的属性保存</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">元素.事件 = function(event){      event = event || window.event;  };    元素.事件 = function(e){  e = e || event;    };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取到鼠标的坐标</strong><br>clientX和clientY<br>用于获取鼠标在当前的可见窗口的坐标<br>div的偏移量，是相对于整个页面的</p><p>pageX和pageY 可以获取鼠标相对于当前页面的坐标<br>但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用<br>var left = event.clientX;<br>var　top = event.clientY;</p><h2 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h2><p>事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。<br>事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br><strong>可以将事件对象的cancelBubble设置为true，即可取消冒泡</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">元素.事件 = function(event){      event = event || window.event;      event.cancelBubble = true;  };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h2><p>指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。</p><p>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能</p><p>我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的<br>我们可以尝试将其绑定给元素的共同的祖先元素</p><p><strong>target</strong> : event中的target表示的触发事件的对象</p><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>addEventListener()<br>通过这个方法也可以为元素绑定响应函数<br>参数：<br>1.事件的字符串，不要on<br>2.回调函数，当事件触发时该函数会被调用<br>3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</p><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，<br>这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</p><p>这个方法不支持IE8及以下的浏览器</p><pre class="line-numbers language-none"><code class="language-none">btn01.addEventListener("click",function(){  alert(1);  },false);    btn01.addEventListener("click",function(){  alert(2);  },false);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>attachEvent()</p><p>在IE8中可以使用attachEvent()来绑定事件<br>参数：<br>1.事件的字符串，要on<br>2.回调函数</p><p>这个方法也可以同时为一个事件绑定多个处理函数，<br>不同的是它是后绑定先执行，执行顺序和addEventListener()相反</p><pre class="line-numbers language-none"><code class="language-none">btn01.attachEvent("onclick",function(){  alert(1);  });    btn01.attachEvent("onclick",function(){  alert(2);  });  //定义一个函数，用来为指定元素绑定响应函数  /*   * addEventListener()中的this，是绑定事件的对象   * attachEvent()中的this，是window   *  需要统一两个方法this   */  /*   * 参数：   * obj 要绑定事件的对象   * eventStr 事件的字符串(不要on)   *  callback 回调函数   */  function bind(obj , eventStr , callback){      if(obj.addEventListener){          //大部分浏览器兼容的方式          obj.addEventListener(eventStr , callback , false);      }else{          /*   * this是谁由调用方式决定   * callback.call(obj)   */          //IE8及以下          obj.attachEvent("on"+eventStr , function(){              //在匿名函数中调用回调函数              callback.call(obj);          });      }  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><p>关于事件的传播网景公司和微软公司有不同的理解<br>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，<br>然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。<br>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，<br>然后在向内传播给后代元素<br>W3C综合了两个公司的方案，将事件传播分成了三个阶段<br>1.捕获阶段<br>在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件<br>2.目标阶段<br>事件捕获到目标元素，捕获结束开始在目标元素上触发事件<br>3.冒泡阶段<br>事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</p><p>如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<br>一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false</p><p>IE8及以下的浏览器中没有捕获阶段</p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>拖拽事件</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;      &lt;html&gt;      &lt;head&gt;      &lt;meta charset="UTF-8"&gt;          &lt;title&gt;&lt;/title&gt;  &lt;style type="text/css"&gt;        #box1{  width: 100px;  height: 100px;  background-color: red;  position: absolute;  }    #box2{  width: 100px;  height: 100px;  background-color: yellow;  position: absolute;    left: 200px;  top: 200px;  }        &lt;/style&gt;    &lt;script type="text/javascript"&gt;        window.onload = function(){      /*   * 拖拽box1元素   *  - 拖拽的流程   * 1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown   * 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove   * 3.当鼠标松开时，被拖拽元素固定在当前位置onmouseup   */        //获取box1      var box1 = document.getElementById("box1");      var box2 = document.getElementById("box2");      var img1 = document.getElementById("img1");        //开启box1的拖拽      drag(box1);      //开启box2的      drag(box2);        drag(img1);    };    /*   * 提取一个专门用来设置拖拽的函数   * 参数：开启拖拽的元素   */  function drag(obj){      //当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown      obj.onmousedown = function(event){            //设置box1捕获所有鼠标按下的事件          /*   * setCapture()   * - 只有IE支持，但是在火狐中调用时不会报错，   * 而如果使用chrome调用，会报错   */          /*if(box1.setCapture){  box1.setCapture();  }*/          obj.setCapture &amp;&amp; obj.setCapture();              event = event || window.event;          //div的偏移量 鼠标.clentX - 元素.offsetLeft          //div的偏移量 鼠标.clentY - 元素.offsetTop          var ol = event.clientX - obj.offsetLeft;          var ot = event.clientY - obj.offsetTop;              //为document绑定一个onmousemove事件          document.onmousemove = function(event){              event = event || window.event;              //当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove              //获取鼠标的坐标              var left = event.clientX - ol;              var top = event.clientY - ot;                //修改box1的位置              obj.style.left = left+"px";              obj.style.top = top+"px";            };            //为document绑定一个鼠标松开事件          document.onmouseup = function(){              //当鼠标松开时，被拖拽元素固定在当前位置onmouseup              //取消document的onmousemove事件              document.onmousemove = null;              //取消document的onmouseup事件              document.onmouseup = null;              //当鼠标松开时，取消对事件的捕获              obj.releaseCapture &amp;&amp; obj.releaseCapture();          };     /*  * 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，  * 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，  * 如果不希望发生这个行为，则可以通过return false来取消默认行为  *   * 但是这招对IE8不起作用  */          return false;      };  }      &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;        我是一段文字    &lt;div id="box1"&gt;&lt;/div&gt;    &lt;div id="box2"&gt;&lt;/div&gt;    &lt;img src="img/an.jpg" id="img1" style="position: absolute;"/&gt;      &lt;/body&gt;  &lt;/html&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚轮事件：</p><p>onwheel都支持</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;      &lt;html&gt;      &lt;head&gt;      &lt;meta charset="UTF-8"&gt;          &lt;title&gt;&lt;/title&gt;  &lt;style type="text/css"&gt;        #box1{  width: 100px;  height: 100px;  background-color: red;  }        &lt;/style&gt;  &lt;script type="text/javascript"&gt;        window.onload = function(){          //获取id为box1的div      var box1 = document.getElementById("box1");        //为box1绑定一个鼠标滚轮滚动的事件      /*   * onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，   * 但是火狐不支持该属性   *    * 在火狐中需要使用 DOMMouseScroll 来绑定滚动事件   * 注意该事件需要通过addEventListener()函数来绑定   */          box1.onmousewheel = function(event){            event = event || window.event;              //event.wheelDelta 可以获取鼠标滚轮滚动的方向          //向上滚 120   向下滚 -120          //wheelDelta这个值我们不看大小，只看正负            //alert(event.wheelDelta);            //wheelDelta这个属性火狐中不支持          //在火狐中使用event.detail来获取滚动的方向          //向上滚 -3  向下滚 3          //alert(event.detail);              /*   * 当鼠标滚轮向下滚动时，box1变长   * 当滚轮向上滚动时，box1变短   */          //判断鼠标滚轮滚动的方向          if(event.wheelDelta &gt; 0 || event.detail &lt; 0){              //向上滚，box1变短              box1.style.height = box1.clientHeight - 10 + "px";            }else{              //向下滚，box1变长              box1.style.height = box1.clientHeight + 10 + "px";          }            /*   * 使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false   * 需要使用event来取消默认行为event.preventDefault();   * 但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错   */          event.preventDefault &amp;&amp; event.preventDefault();              /*   * 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，   * 这是浏览器的默认行为，如果不希望发生，则可以取消默认行为   */          return false;              };        //为火狐绑定滚轮事件      bind(box1,"DOMMouseScroll",box1.onmousewheel);      };      function bind(obj , eventStr , callback){      if(obj.addEventListener){          //大部分浏览器兼容的方式          obj.addEventListener(eventStr , callback , false);      }else{          /*   * this是谁由调用方式决定   * callback.call(obj)   */          //IE8及以下          obj.attachEvent("on"+eventStr , function(){              //在匿名函数中调用回调函数              callback.call(obj);          });      }  }    &lt;/script&gt;  &lt;/head&gt;  &lt;body style="height: 2000px;"&gt;        &lt;div id="box1"&gt;&lt;/div&gt;    &lt;/body&gt;  &lt;/html&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件：<br>onkeydown<br>按键被按下<br>对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发<br>当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。<br>onkeyup<br>按键被松开</p><p>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</p><p>keyCode</p><p>可以通过keyCode来获取按键的编码<br>通过它可以判断哪个按键被按下<br>除了keyCode，事件对象中还提供了几个属性<br>altKey<br>ctrlKey<br>shiftKey<br>这个三个用来判断alt ctrl 和 shift是否被按下<br>如果按下则返回true，否则返回false</p><pre class="line-numbers language-none"><code class="language-none">//console.log(event.keyCode);    //判断一个y是否被按下  //判断y和ctrl是否同时被按下  if(event.keyCode === 89 &amp;&amp; event.ctrlKey){  console.log("ctrl和y都被按下了");  }  input.onkeydown = function(event) {      event = event || window.event;      //数字 48 - 57      //使文本框中不能输入数字      if(event.keyCode &gt;= 48 &amp;&amp; event.keyCode &lt;= 57) {          //在文本框中输入内容，属于onkeydown的默认行为          //如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中          return false;      }  };    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>浏览器对象模型(browser object model)<br>BOM可以使我们通过JS来操作浏览器<br>在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br>BOM对象<br>Window<br>代表的是整个浏览器的窗口，同时window也是网页中的全局对象<br>Navigator<br>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>Location<br>代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br>History<br>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页<br>而且该操作只在当次访问时有效<br>Screen<br>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</p><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，<br>可以通过window对象来使用，也可以直接使用</p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了<br>一般我们只会使用userAgent来判断浏览器的信息，<br>userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，<br>不同的浏览器会有不同的userAgent</p><p>火狐的userAgent<br>Mozilla5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko20100101 Firefox50.0</p><p>Chrome的userAgent<br>Mozilla5.0 (Windows NT 6.1; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Chrome52.0.2743.82 Safari537.36</p><p>IE8<br>Mozilla4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE9<br>Mozilla5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE10<br>Mozilla5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE11<br>Mozilla5.0 (Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko<br>在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了</p><pre class="line-numbers language-none"><code class="language-none">alert(navigator.appName);    var ua = navigator.userAgent;    console.log(ua);    if(firefoxi.test(ua)){  alert("你是火狐！！！");  }else if(chromei.test(ua)){  alert("你是Chrome");  }else if(msiei.test(ua)){  alert("你是IE浏览器~~~");  }else if("ActiveXObject" in window){  alert("你是IE11，枪毙了你~~~");  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>对象可以用来操作浏览器向前或向后翻页<br>length<br>属性，可以获取到当成访问的链接数量<br>back()<br>可以用来回退到上一个页面，作用和浏览器的回退按钮一样<br>forward()<br>可以跳转下一个页面，作用和浏览器的前进按钮一样<br>go()<br>可以用来跳转到指定的页面<br>它需要一个整数作为参数<br>1:表示向前跳转一个页面 相当于forward()<br>2:表示向前跳转两个页面<br>-1:表示向后跳转一个页面<br>-2:表示向后跳转两个页面</p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p>该对象中封装了浏览器的地址栏的信息<br>如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）<br>alert(location);<br>如果直接将location属性修改为一个完整的路径，或相对路径<br>则我们页面会自动跳转到该路径，并且会生成相应的历史记录<br>location = “http:<a href="http://www.baidu.com/">www.baidu.com</a>“;<br>location = “01.BOM.html”;<br>assign()<br>用来跳转到其他的页面，作用和直接修改location一样<br>reload()<br>用于重新加载当前页面，作用和刷新按钮一样<br>如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面<br>location.reload(true);<br>replace()<br>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面<br>不会生成历史记录，不能使用回退按钮回退</p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><strong>setInterval()</strong><br>定时调用<br>可以将一个函数，每隔一段时间执行一次<br>参数：<br>1.回调函数，该函数会每隔一段时间被调用一次<br>2.每次调用间隔的时间，单位是毫秒</p><p>返回值：<br>返回一个Number类型的数据<br>这个数字用来作为定时器的唯一标识<br><strong>clearInterval()可以用来关闭一个定时器</strong><br>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器</p><p>clearInterval()可以接收任意参数，<br>如果参数是一个有效的定时器的标识，则停止对应的定时器<br>如果参数不是一个有效的标识，则什么也不做</p><pre class="line-numbers language-none"><code class="language-none">var num = 1;  var timer = setInterval(function() {  count.innerHTML = num++;  if(num == 11) {  //关闭定时器  clearInterval(timer);  }  }, 1000);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h3><p><strong>setTimeout</strong></p><p>延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次<br>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次<br>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择</p><p>var timer = setTimeout(function(){<br>console.log(num++);<br>},3000);</p><p>使用clearTimeout()来关闭一个延时调用<br>clearTimeout(timer);</p><p>#类的操作</p><p><strong>直接修改元素的类css：</strong></p><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面。 这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便 我希望一行代码，可以同时修改多个样式</p><p>我们可以通过修改元素的class属性来间接的修改样式.这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，<br>并且这种方式，可以使表现和行为进一步的分离</p><pre class="line-numbers language-none"><code class="language-none">box.className += " b2";//注意有空格，添加class属性  //定义一个函数，用来向一个元素中添加指定的class属性值  /*   * 参数:   * obj 要添加class属性的元素   *  cn 要添加的class值   *    */  function addClass(obj, cn) {  if (!hasClass(obj, cn)) {  obj.className += " " + cn;  }  }  /*   * 判断一个元素中是否含有指定的class属性值   * 如果有该class，则返回true，没有则返回false   *    */  function hasClass(obj, cn) {  var reg = new RegExp("\\b" + cn + "\\b");  return reg.test(obj.className);  }  /*   * 删除一个元素中的指定的class属性   */  function removeClass(obj, cn) {  //创建一个正则表达式  var reg = new RegExp("\\b" + cn + "\\b");  //删除class  obj.className = obj.className.replace(reg, "");  }  /*   * toggleClass可以用来切换一个类   * 如果元素中具有该类，则删除   * 如果元素中没有该类，则添加   */  function toggleClass(obj , cn){  //判断obj中是否含有cn  if(hasClass(obj , cn)){  //有，则删除  removeClass(obj , cn);  }else{  //没有，则添加  addClass(obj , cn);  }  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><strong>JavaScript Object Notation</strong> JS对象表示法</p><h2 id="JSON-格式"><a href="#JSON-格式" class="headerlink" title="JSON 格式"></a>JSON 格式</h2><ol><li>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</li><li>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和<code>null</code>（不能使用<code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>和<code>undefined</code>）。</li><li>字符串<strong>必须使用双引号表示</strong>，不能使用单引号。</li><li>对象的键名必须放在双引号里面。</li><li>数组或对象最后一个成员的后面，不能加逗号。</li></ol><p>JS中的对象只有JS自己认识，其他的语言都不认识<br><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别，<br>并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互<br>JSON和JS对象的格式一样，只不过<strong>JSON字符串中的属性名必须加双引号</strong><br>其他的和JS语法一致<br>JSON分类：<br>1.对象 {}<br>2.数组 []</p><p>JSON中允许的值：<br>1.字符串<br>2.数值<br>3.布尔值<br>4.null<br>5.对象<br>6.数组</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">var arr = '[1,2,3,"hello",true]';    var obj2 = '{"arr":[1,2,3]}';    var arr2 ='[{"name":"孙悟空","age":18,"gender":"男"},{"name":"孙悟空","age":18,"gender":"男"}]';  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSON工具类</p><p>json &gt; js对象<br>JSON.parse()<br>可以将以JSON字符串转换为js对象<br>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p>var o = JSON.parse(json);<br>var o2 = JSON.parse(arr);</p><p>var obj3 = {name:”猪八戒” , age:28 , gender:”男”};</p><p>JS对象 &gt; JSON<br>JSON.stringify() -ify/fy，表示”使……化。<br>可以将一个JS对象转换为JSON字符串<br>需要一个js对象作为参数，会返回一个JSON字符串</p><p>var str = JSON.stringify(obj3);<br>console.log(str);</p><p>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a>；其存储的数据能在跨浏览器会话保留。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>eval()<br>这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回<br>如果使用eval()执行的字符串中含有{},它会将{}当成是代码块<br>如果不希望将其当成代码块解析，则需要在字符串前后各加一个()</p><p>eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，<br>但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患</p><pre class="line-numbers language-none"><code class="language-none">var str = '{"name":"孙悟空","age":18,"gender":"男"}';  var obj = eval("("+str+")");  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;  &lt;html&gt;  &lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;title&gt;&lt;/title&gt;  &lt;script type="text/javascript"&gt;    /*   * 在字符串中使用转义字符输入Unicode编码   * \u四位编码   */  console.log("\u2620");  &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;!--在网页中使用Unicode编码  &amp;#编码; 这里的编码需要的是10进制  --&gt;  &lt;h1 style="font-size: 200px;"&gt;&amp;#9760;&lt;/h1&gt;  &lt;h1 style="font-size: 200px;"&gt;&amp;#9856;&lt;/h1&gt;  &lt;/body&gt;  &lt;/html&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>confirm()用于弹出一个带有确认和取消按钮的提示框<br>需要一个字符串作为参数，该字符串将会作为提示文字显示出来<br>如果用户点击确认则会返回true，如果点击取消则返回false<br>var flag = confirm(“确认删除”+name+”吗?”);</p><h2 id="原生js"><a href="#原生js" class="headerlink" title="# 原生js"></a># 原生js</h2><h2 id="原生js实现复制内容到剪切板"><a href="#原生js实现复制内容到剪切板" class="headerlink" title="原生js实现复制内容到剪切板"></a>原生js实现复制内容到剪切板</h2><pre class="line-numbers language-none"><code class="language-none">copy() {      const input = document.createElement("input");      document.body.appendChild(input);      input.setAttribute("value",this.solution.code);      input.select();      if (document.execCommand("copy")) {          document.execCommand("copy");          // console.log("复制成功");      }      document.body.removeChild(input);  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/02/09/first/"/>
      <url>2021/02/09/first/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-hash" data-language="hash"><code class="language-hash">title: 测试cover: truedate: 2021-02-09 19:14:00img: https://wx2.sinaimg.cn/mw690/007wCCI7ly1gnlt0gsspkj33kg1ls4qr.jpgcoverImg: https://wx2.sinaimg.cn/mw690/007wCCI7ly1gnlt0gsspkj33kg1ls4qr.jpgsummary: 我的博客tags:  - myfirstcategories:   - 测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/featureimages/2.jpg"></p><p> hello</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/23/sort-algorithms/"/>
      <url>2021/01/23/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 十大经典排序算法整理汇总（附代码）<br>top: true<br>cover: false<br>toc: true<br>mathjax: true<br>date: 2021-01-19 15:09:23<br>password:<br>summary: 本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。<br>tags:</p><ul><li>leetcode</li><li>算法<br>categories:</li><li>编程算法</li></ul><hr><blockquote><p>关注公众号【nxg】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后十种排序算法的 c++ 代码，来源于他人博客，个人觉得不错就分享给大家，用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>推荐使用英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre><code class="cpp">class Solution {public:    vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) {        return quickSort(nums);    }    // 冒泡排序（超时）    vector&lt;int&gt; bubbleSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        for (int i = 0; i &lt; n; ++i) {            for (int j = n-2; j &gt;= i; --j) {                if (nums[j] &gt; nums[j+1]) {                    swap(nums[j], nums[j+1]);                }            }        }        return nums;    }    // 选择排序（超时）    vector&lt;int&gt; selectSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        for (int i = 0; i &lt; n; ++i) {            int idx = i;            for (int j = i; j &lt; n; ++j) {                if (nums[j] &lt; nums[idx]) {                    idx = j;                }            }            swap(nums[i], nums[idx]);        }        return nums;    }    // 插入排序（超时）    vector&lt;int&gt; insertSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        for (int i = 0; i &lt; n; ++i) {            for (int j = i; j &gt; 0 &amp;&amp; nums[j] &lt; nums[j-1]; --j) {                swap(nums[j], nums[j-1]);            }        }        return nums;    }    // 快速排序（24 ms）    void qSort(vector&lt;int&gt;&amp; nums, int l, int r) {        if (l &gt;= r) return;        int m = l;        for (int i = l; i &lt; r; ++i) {            if (nums[i] &lt; nums[r]) {                swap(nums[m++], nums[i]);            }        }        swap(nums[m], nums[r]);        qSort(nums, l, m-1);        qSort(nums, m+1, r);    }    vector&lt;int&gt; quickSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        qSort(nums, 0, n-1);        return nums;    }    // 归并排序（192 ms）    vector&lt;int&gt; mSort(vector&lt;int&gt;&amp; nums, int l, int r) {        if (l &gt;= r) return {nums[l]};        int m = l+(r-l)/2;        vector&lt;int&gt; lnums = mSort(nums, l, m);        vector&lt;int&gt; rnums = mSort(nums, m+1, r);        vector&lt;int&gt; res;        int i = 0, j = 0;        while (i &lt;= m-l &amp;&amp; j &lt;= r-m-1) {            if (lnums[i] &lt; rnums[j]) {                res.push_back(lnums[i++]);            } else {                res.push_back(rnums[j++]);            }        }        while (i &lt;= m-l) {            res.push_back(lnums[i++]);        }        while (j &lt;= r-m-1) {            res.push_back(rnums[j++]);        }        return res;    }    vector&lt;int&gt; mergeSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        nums = mSort(nums, 0, n-1);        return nums;    }    // 归并排序 + 非递归（80 ms）    vector&lt;int&gt; mergeSortNR(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        for (int len = 1; len &lt; n; len &lt;&lt;= 1) {            for (int l = 0; l &lt; n-len; l += 2*len) {                int m = l+len-1;                int r = min(n-1, l+2*len-1);                vector&lt;int&gt; res;                int i = l, j = m+1;                while (i &lt;= m &amp;&amp; j &lt;= r) {                    if (nums[i] &lt; nums[j]) {                        res.push_back(nums[i++]);                    } else {                        res.push_back(nums[j++]);                    }                }                while (i &lt;= m) {                    res.push_back(nums[i++]);                }                while (j &lt;= r) {                    res.push_back(nums[j++]);                }                for (int i = l; i &lt;= r; ++i) {                    nums[i] = res[i-l];                }            }        }        return nums;    }    // 希尔排序（40 ms）    vector&lt;int&gt; shellSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        for (int gap = n/2; gap &gt; 0; gap /= 2) {            for (int i = gap; i &lt; n; ++i) {                for (int j = i; j-gap &gt;= 0 &amp;&amp; nums[j-gap] &gt; nums[j]; j -= gap) {                    swap(nums[j-gap], nums[j]);                }            }        }        return nums;    }    // 计数排序（32 ms）    vector&lt;int&gt; countSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        if (!n) return {};        int minv = *min_element(nums.begin(), nums.end());        int maxv = *max_element(nums.begin(), nums.end());        int m = maxv-minv+1;        vector&lt;int&gt; count(m, 0);        for (int i = 0; i &lt; n; ++i) {            count[nums[i]-minv]++;        }        vector&lt;int&gt; res;        for (int i = 0; i &lt; m; ++i) {            for (int j = 0; j &lt; count[i]; ++j) {                res.push_back(i+minv);            }        }        return res;    }    // 基数排序（不适用于负数）    vector&lt;int&gt; radixSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        int maxv = *max_element(nums.begin(), nums.end());        int maxd = 0;        while (maxv &gt; 0) {            maxv /= 10;            maxd++;        }        vector&lt;int&gt; count(10, 0), rank(n, 0);        int base = 1;        while (maxd &gt; 0) {            count.assign(10, 0);            for (int i = 0; i &lt; n; ++i) {                count[(nums[i]/base)%10]++;            }            for (int i = 1; i &lt; 10; ++i) {                count[i] += count[i-1];            }            for (int i = n-1; i &gt;= 0; --i) {                rank[--count[(nums[i]/base)%10]] = nums[i];            }            for (int i = 0; i &lt; n; ++i) {                nums[i] = rank[i];            }            maxd--;            base *= 10;        }        return nums;    }    // 桶排序 (20 ms)    vector&lt;int&gt; bucketSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        int maxv = *max_element(nums.begin(), nums.end());        int minv = *min_element(nums.begin(), nums.end());        int bs = 1000;        int m = (maxv-minv)/bs+1;        vector&lt;vector&lt;int&gt; &gt; bucket(m);        for (int i = 0; i &lt; n; ++i) {            bucket[(nums[i]-minv)/bs].push_back(nums[i]);        }        int idx = 0;        for (int i = 0; i &lt; m; ++i) {            int sz = bucket[i].size();            bucket[i] = quickSort(bucket[i]);            for (int j = 0; j &lt; sz; ++j) {                nums[idx++] = bucket[i][j];            }        }        return nums;    }    // 堆排序（32 ms）    void adjust(vector&lt;int&gt;&amp; nums, int p, int s) {        while (2*p+1 &lt; s) {            int c1 = 2*p+1;            int c2 = 2*p+2;            int c = (c2&lt;s &amp;&amp; nums[c2]&gt;nums[c1]) ? c2 : c1;            if (nums[c] &gt; nums[p]) swap(nums[c], nums[p]);            else break;            p = c;        }    }    vector&lt;int&gt; heapSort(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        for (int i = n/2-1; i &gt;= 0; --i) {            adjust(nums, i, n);        }        for (int i = n-1; i &gt; 0; --i) {            swap(nums[0], nums[i]);            adjust(nums, 0, i);        }        return nums;    }};</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>漫长而又快</title>
      <link href="2021/01/16/feel/"/>
      <url>2021/01/16/feel/</url>
      
        <content type="html"><![CDATA[<p>经过几天的折腾，终于有了一点进展，雏形已经出来了，剩下的就是需要修改的部分。<br>恍惚几天就过去了，才发现走了许多弯路，如果自己不过于追寻那样的主题，也许很快就搭建完了。<br>可是我没有，<br>但在今后，我得抓紧打基础，一步一个脚印的走，向更远奔跑。<br>不能钻牛角尖，学会放手，过段时间再去研究，可能就有不同的效果。<br>沉稳，冷静，细心。<br>加油！</p><hr><p>希望和悲伤，都是一缕光。</p><hr>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feel </tag>
            
            <tag> 感受 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫长而又快</title>
      <link href="2021/01/16/test/"/>
      <url>2021/01/16/test/</url>
      
        <content type="html"><![CDATA[<hr><p>希望和悲伤，都是一缕光。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 经历才知道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feel </tag>
            
            <tag> 感受 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/15/hello-world/"/>
      <url>2021/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
