<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有趣的项目推荐</title>
      <link href="posts/111e0cd7.html"/>
      <url>posts/111e0cd7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="音乐类"><a href="#音乐类" class="headerlink" title="音乐类"></a>音乐类</h2><p><a href="https://github.com/JumpAlang/Jusic-Serve-Houses">一起听歌吧多房间版本</a></p><p>示例：<a href="http://music.alang.run/">多人房间在线听歌</a></p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304182143632.png" alt="image-20230418214257639"></p>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有趣的项目推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p align="center">  <a href="https://github.com/yanglbme/gitee-pages-action">    <img src="./images/logo.png" alt="gitee-pages-action">  </a></p><p align="center">  <a href="./LICENSE"><img src="https://img.shields.io/github/license/yanglbme/gitee-pages-action?color=42b883&amp;style=flat-square" alt="license"></a>  <a href="../../releases"><img src="https://img.shields.io/github/v/release/yanglbme/gitee-pages-action?color=42b883&amp;style=flat-square" alt="release"></a>  <a href="#谁在使用"><img src="https://shields.io/badge/who's-using-42b883?style=flat-square" alt="users"></a>  <a href="#错误及解决方案"><img src="https://shields.io/badge/faq-here-42b883?style=flat-square" alt="users"></a>  <a href="https://github.com/yanglbme/gitee-pages-action"><img src="https://shields.io/badge/%E2%AD%90-GitHub-42b883?style=flat-square" alt="github"></a>  <a href="https://gitee.com/yanglbme/gitee-pages-action"><img src="https://shields.io/badge/%E2%AD%90-Gitee-42b883?style=flat-square" alt="gitee"></a><br>  <a href="https://github.com/yanglbme/gitee-pages-action/stargazers"><img src="https://img.shields.io/github/stars/yanglbme/gitee-pages-action?color=42b883&amp;logo=github&amp;style=flat-square" alt="stars"></a>  <a href="https://github.com/yanglbme/gitee-pages-action/network/members"><img src="https://img.shields.io/github/forks/yanglbme/gitee-pages-action?color=42b883&amp;logo=github&amp;style=flat-square" alt="forks"></a></p><h1 align="center">Gitee Pages Action</h1><p>由于 Gitee Pages 的访问速度很快，很多朋友会选择 Gitee Pages 部署项目（如：个人博客、开源项目国内镜像站点）。但是它不像 GitHub Pages 那样，一提交代码就能自动更新 Pages，因为 Gitee 的自动部署属于 Gitee Pages Pro 的服务。</p><p>为了实现 Gitee Pages 的自动部署，我开发了 <a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a> ，只需要在 GitHub 项目的 Settings 页面下配置 keys，然后在 <code>.github/workflows/</code> 下创建一个工作流，引入一些配置参数即可。欢迎 Star ⭐ 关注本项目。</p><p>欢迎体验，若有使用上的问题，也欢迎随时提交 <a href="https://github.com/yanglbme/gitee-pages-action/issues">Issues</a> 反馈。</p><p>注：</p><ol><li>首次需要<strong>手动</strong>登录 Gitee ，点击“启动”进行 Gitee Pages 服务的部署。</li><li>由于 Gitee 改版，使用 Gitee Pages 前需要先完成实名认证。</li></ol><h2 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h2><table><thead><tr><th>参数</th><th>描述</th><th>是否必传</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>gitee-username</code></td><td>Gitee 用户名</td><td>是</td><td>-</td><td><code>yanglbme</code></td></tr><tr><td><code>gitee-password</code></td><td>Gitee 密码</td><td>是</td><td>-</td><td><code>${{ secrets.GITEE_PASSWORD }}</code></td></tr><tr><td><code>gitee-repo</code></td><td>Gitee 仓库（严格区分大小写）</td><td>是</td><td>-</td><td><code>doocs/leetcode</code></td></tr><tr><td><code>branch</code></td><td>要部署的分支（分支必须存在）</td><td>否</td><td><code>master</code></td><td><code>main</code></td></tr><tr><td><code>directory</code></td><td>要部署的分支上的目录</td><td>否</td><td></td><td><code>src</code></td></tr><tr><td><code>https</code></td><td>是否强制使用 HTTPS</td><td>否</td><td><code>true</code></td><td><code>false</code></td></tr></tbody></table><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><h3 id="1-创建-workflow"><a href="#1-创建-workflow" class="headerlink" title="1. 创建 workflow"></a>1. 创建 workflow</h3><p>在你的 GitHub 项目 <code>.github/workflows/</code> 文件夹下创建一个 <code>.yml</code> 文件，如 <code>sync.yml</code>，内容如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">name: Syncon:  push:    branches: [main]  workflow_dispatch:jobs:  build:    runs-on: ubuntu-latest    steps:      - name: Sync to Gitee        uses: wearerequired/git-mirror-action@master        env:          # 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}        with:          # 注意替换为你的 GitHub 源仓库地址          source-repo: git@github.com:doocs/leetcode.git          # 注意替换为你的 Gitee 目标仓库地址          destination-repo: git@gitee.com:Doocs/leetcode.git      - name: Build Gitee Pages        uses: yanglbme/gitee-pages-action@main        with:          # 注意替换为你的 Gitee 用户名          gitee-username: yanglbme          # 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD          gitee-password: ${{ secrets.GITEE_PASSWORD }}          # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错          gitee-repo: doocs/leetcode          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）          branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><ol><li>这里我先使用 <a href="https://github.com/wearerequired/git-mirror-action">wearerequired/git-mirror-action</a> 将 GitHub 仓库同步到 Gitee 仓库，再使用 <a href="https://github.com/yanglbme/gitee-pages-action">yanglbme/gitee-pages-action</a> 实现 Gitee Pages 的自动部署。如果你已经通过其它的方式，将代码 push 至 Gitee 了，那么可以不使用 <a href="https://github.com/wearerequired/git-mirror-action">wearerequired/git-mirror-action</a>，也不需要配置 <code>GITEE_RSA_PRIVATE_KEY</code>。</li><li><code>branch</code> 参数默认是 <code>master</code>，如果你是部署在 <code>gh-pages</code>(或者 <code>main</code>) 分支等等，务必指定 <code>branch: gh-pages</code>(或者 <code>branch: main</code>)。</li><li><code>branch</code> 对应的分支，必须在仓库中实际存在，请不要随意（不）指定分支，否则可能导致 Gitee Pages 站点出现 404 无法访问的情况。</li><li>对于 <code>gitee-repo</code> 参数，如果你的项目在 Gitee 的地址为 <a href="https://gitee.com/%E7%94%A8%E6%88%B7%E5%90%8D/xxx">https://gitee.com/用户名/xxx</a> ，那么 <code>gitee-repo</code> 就填写为 <code>用户名/xxx</code>。<a href="https://github.com/yanglbme/gitee-pages-action/issues/54">#54</a></li><li>对于 workflow 的触发事件，你可以根据项目实际情况，指定为其它的触发事件。比如：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">on:  push:    branches: <span class="token punctuation">[</span>main, master<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>更多触发事件，请参考 <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows">Events that trigger workflows</a></li></ol><h3 id="2-配置密钥"><a href="#2-配置密钥" class="headerlink" title="2. 配置密钥"></a>2. 配置密钥</h3><p>密钥的配置步骤如下（可展开看示例图）：</p><details><summary>a. 在命令行终端或 Git Bash 使用命令 <code>ssh-keygen -t rsa -C "youremail@example.com"</code> 生成 SSH Key，注意替换为自己的邮箱。生成的 <code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥。(⚠️注意此处不要设置密码，生成的公私钥用于下面 GitHub / Gitee 的配置，以保证公私钥成对，否则从 GitHub -&gt; Gitee 的同步将会失败。)</summary><img src="./images/gen_ssh_key.png" alt="gen_ssh_key"></details><details><summary>b. 在 GitHub 项目的「Settings -&gt; Secrets」路径下配置好命名为 <code>GITEE_RSA_PRIVATE_KEY</code> 和 <code>GITEE_PASSWORD</code> 的两个密钥。其中：<code>GITEE_RSA_PRIVATE_KEY</code> 存放 <code>id_rsa</code> 私钥；<code>GITEE_PASSWORD</code> 存放 Gitee 帐号的密码。</summary><img src="./images/add_secrets.png" alt="add_secrets"></details><details><summary>c. 在 GitHub 的个人设置页面「<a href="https://github.com/settings/keys">Settings -&gt; SSH and GPG keys</a>」配置 SSH 公钥（即：<code>id_rsa.pub</code>），命名随意。</summary><img src="./images/add_ssh_key_github.png" alt="add_ssh_key_github"></details><details><summary>d. 在 Gitee 的个人设置页面「<a href="https://gitee.com/profile/sshkeys">安全设置 -&gt; SSH 公钥</a>」配置 SSH 公钥（即：<code>id_rsa.pub</code>），命名随意。</summary><img src="./images/add_ssh_key_gitee.png" alt="add_ssh_key_gitee"></details><h3 id="3-关注-Gitee-公众号"><a href="#3-关注-Gitee-公众号" class="headerlink" title="3. 关注 Gitee 公众号"></a>3. 关注 Gitee 公众号</h3><p>关注 Gitee 官方公众号，并绑定个人 Gitee 帐号，用于接收帐号登录通知、以及绕过短信验证码校验，见<a href="#%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">错误及解决方案</a> 第 3 点。</p><h3 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4. 运行结果"></a>4. 运行结果</h3><p>如果一切配置正常，并成功触发 <a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a> ，Gitee Pages Action 会打印出成功的结果。并且，我们会在 Gitee 公众号收到一条登录通知。这是 Gitee Pages Action 程序帮我们登录到 Gitee 官网，并为我们点击了项目的部署按钮。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Run yanglbme/gitee-pages-action@main  with:    gitee-username: yanglbme    gitee-password: ***    gitee-repo: doocs/leetcode    branch: main    https: <span class="token boolean">true</span>/usr/bin/docker run --name e28490f27de0ee43bb49109a40cea0e43202d2_d4911a --label e28490 --workdir /github/workspace --rm -e INPUT_GITEE-USERNAME -e INPUT_GITEE*** INPUT_GITEE-REPO -e INPUT_BRANCH -e INPUT_DIRECTORY -e INPUT_HTTPS -e <span class="token environment constant">HOME</span> -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_RETENTION_DAYS -e GITHUB_RUN_ATTEMPT -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_REF_NAME -e GITHUB_REF_PROTECTED -e GITHUB_REF_TYPE -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF -e GITHUB_PATH -e GITHUB_ENV -e RUNNER_OS -e RUNNER_ARCH -e RUNNER_NAME -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e <span class="token assign-left variable">GITHUB_ACTIONS</span><span class="token operator">=</span>true -e <span class="token assign-left variable">CI</span><span class="token operator">=</span>true -v <span class="token string">"/var/run/docker.sock"</span><span class="token builtin class-name">:</span><span class="token string">"/var/run/docker.sock"</span> -v <span class="token string">"/home/runner/work/_temp/_github_home"</span><span class="token builtin class-name">:</span><span class="token string">"/github/home"</span> -v <span class="token string">"/home/runner/work/_temp/_github_workflow"</span><span class="token builtin class-name">:</span><span class="token string">"/github/workflow"</span> -v <span class="token string">"/home/runner/work/_temp/_runner_file_commands"</span><span class="token builtin class-name">:</span><span class="token string">"/github/file_commands"</span> -v <span class="token string">"/home/runner/work/leetcode/leetcode"</span><span class="token builtin class-name">:</span><span class="token string">"/github/workspace"</span> e28490:f27de0ee43bb49109a40cea0e43202d2<span class="token punctuation">[</span><span class="token number">2021</span>-11-27 <span class="token number">20</span>:16:30<span class="token punctuation">]</span> Welcome to use Gitee Pages Action ❤📕 Getting Started Guide: https://github.com/marketplace/actions/gitee-pages-action📣 Maintained by Yang Libin: https://github.com/yanglbme<span class="token punctuation">[</span><span class="token number">2021</span>-11-27 <span class="token number">20</span>:16:34<span class="token punctuation">]</span> Login successfully<span class="token punctuation">[</span><span class="token number">2021</span>-11-27 <span class="token number">20</span>:16:35<span class="token punctuation">]</span> Rebuild Gitee Pages successfully<span class="token punctuation">[</span><span class="token number">2021</span>-11-27 <span class="token number">20</span>:16:35<span class="token punctuation">]</span> Success, thanks <span class="token keyword">for</span> using @yanglbme/gitee-pages-action<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="./images/action.png" alt="action_result"><img src="./images/wechat_notification.jpg" alt="add_ssh_key_gitee" style="width: 750px; height: 1334px;"><h2 id="错误及解决方案"><a href="#错误及解决方案" class="headerlink" title="错误及解决方案"></a>错误及解决方案</h2><table><thead><tr><th>#</th><th>错误</th><th>解决方案</th></tr></thead><tbody><tr><td>1</td><td>Error: Wrong username or password, login failed .</td><td>帐号或密码错误，请检查参数 <code>gitee-username</code>、<code>gitee-password</code>是否准确配置。</td></tr><tr><td>2</td><td>Error: Need captcha validation, please visit <a href="https://gitee.com/login">https://gitee.com/login</a>, login to validate your account.</td><td>需要图片验证码校验。可以手动登录 Gitee 官方，校验验证码。</td></tr><tr><td>3</td><td>Error: Need phone captcha validation, please follow wechat official account “Gitee” to bind account to turn off authentication.</td><td>需要短信验证码校验。可以关注 Gitee 微信公众号，并绑定 Gitee 帐号，接收登录提示。<a href="https://github.com/yanglbme/gitee-pages-action/issues/6">#6</a></td></tr><tr><td>4</td><td>Error: Do not deploy frequently, try again one minute later.</td><td>短期内频繁部署 Gitee Pages 导致，可以稍后再触发自动部署。</td></tr><tr><td>5</td><td>Error: Deploy error occurred, please check your input <code>gitee-repo</code>.</td><td><code>gitee-repo</code> 参数格式如：<code>doocs/leetcode</code>，并且严格区分大小写，请准确填写。<a href="https://github.com/yanglbme/gitee-pages-action/issues/10">#10</a></td></tr><tr><td>6</td><td>Error: Unknown error occurred in login method, resp: …</td><td>登录出现未知错误，请在 <a href="https://github.com/yanglbme/gitee-pages-action/issues">issues</a> 区反馈。</td></tr><tr><td>7</td><td>Error: Rebuild page error, status code: xxx</td><td>更新 Pages 时状态码异常，请尝试再次触发 Action 执行。也可能为 gitee pages 未初始化，第一次需要手动部署 gitee pages。</td></tr><tr><td>8</td><td>Error: HTTPSConnectionPool(host=’gitee.com’, port=443): Read timed out. (read timeout=6)<br><br>Error: HTTPSConnectionPool(host=’gitee.com’, port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x7f6c889d42e8&gt;, ‘Connection to gitee.com timed out. (connect timeout=6)’))</td><td>网络请求出错，请尝试 Re-run jobs 。<a href="https://github.com/yanglbme/gitee-pages-action/issues/27">#27</a></td></tr><tr><td>9</td><td><a href="mailto:git@github.com">git@github.com</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists..</td><td>先尝试 Re-run job。<a href="https://github.com/yanglbme/gitee-pages-action/issues/56">#56</a> <br>若仍旧失败，可能是 SSH 公私钥配置有问题，或是使用了带密码的私钥，请参照上文提及的密钥配置步骤进行相应配置。<a href="https://github.com/yanglbme/gitee-pages-action/issues/29">#29</a></td></tr><tr><td>10</td><td>Hexo Gitee Pages 自动部署站点问题。</td><td><a href="https://github.com/No5972">@No5972</a> 详细给出了一种解决方案。<a href="https://github.com/yanglbme/gitee-pages-action/issues/34">#34</a></td></tr><tr><td>11</td><td>“/root/.ssh/id_rsa”: invalid format.</td><td>操作系统环境不同，生成 ssh key 的方式可能有所差别，尝试添加 <code>-m PEM</code> 参数试试。<a href="https://github.com/yanglbme/gitee-pages-action/issues/49">#49</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="谁在使用"><a href="#谁在使用" class="headerlink" title="谁在使用"></a>谁在使用</h2><table>  <tbody><tr>    <td align="center" style="width: 80px;">      <a href="https://github.com/antvis">        <img src="./images/antv.png" style="width: 40px;" alt="蚂蚁金服"><br>        <sub>蚂蚁金服 - 数据可视化</sub>      </a>    </td>    <td align="center" style="width: 80px;">      <a href="https://github.com/doocs">        <img src="./images/doocs.png" style="width: 40px;" alt="Doocs"><br>        <sub>Doocs 技术社区</sub>      </a>    </td>     <td align="center" style="width: 80px;">      <a href="https://github.com/Kaiyiwing/qwerty-learner">        <img src="./images/qwerty-learner-logo.svg" style="width: 40px;" alt="Qwerty Learner"><br>        <sub>Qwerty Learner</sub>      </a>    </td>  </tr>  <tr>    <td style="width: 80px; text-align: left;">      <ul>        <li><a href="https://github.com/antvis/g">antvis/g</a></li>        <li><a href="https://github.com/antvis/F2">antvis/F2</a></li>        <li><a href="https://github.com/antvis/G6">antvis/G6</a></li>        <li><a href="https://github.com/antvis/L7">antvis/L7</a></li>        <li><a href="https://github.com/antvis/G2Plot">antvis/G2Plot</a></li>        <li><a href="https://github.com/antvis/Graphin">antvis/Graphin</a></li>        <li><a href="https://github.com/antvis/antvis.github.io">antvis/antvis.github.io</a></li>      </ul>    </td>    <td style="width: 80px; text-align: left;">      <ul>        <li><a href="https://github.com/doocs/jvm">doocs/jvm</a></li>        <li><a href="https://github.com/doocs/leetcode">doocs/leetcode</a></li>        <li><a href="https://github.com/doocs/advanced-java">doocs/advanced-java</a></li>        <li><a href="https://github.com/doocs/doocs.github.io">doocs/doocs.github.io</a></li>        <li><a href="https://github.com/doocs/source-code-hunter">doocs/source-code-hunter</a></li>      </ul>    </td>    <td style="width: 80px; text-align: left;">      <ul>        <li><a href="https://github.com/Kaiyiwing/qwerty-learner" style="white-space: nowrap">Qwerty Learner</a></li>        <li><a href="https://github.com/Kaiyiwing/qwerty-learner-vscode" style="white-space: nowrap">Qwerty Learner VSCode</a></li>      </ul>    </td>  </tr></tbody></table><p>查看更多用户，请访问 <a href="https://cs.github.com/?scopeName=All+repos&amp;scope=&amp;q=yanglbme/gitee-pages-action">https://cs.github.com/?scopeName=All+repos&amp;scope=&amp;q=yanglbme%2Fgitee-pages-action</a></p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>对于 Gitee Pages Action 有任何的疑问，还可以通过以下方式找到我。</p><table>  <tbody><tr>    <td align="center" style="width: 200px;">      <a href="https://github.com/doocs">        <img src="./images/qrcode-for-doocs.jpg" style="width: 400px;" alt="公众号"><br>        <sub>公众平台</sub>      </a><br>    </td>    <td align="center" style="width: 200px;">      <a href="https://github.com/yanglbme">        <img src="./images/qrcode-for-yanglbme.jpg" style="width: 400px;" alt="微信"><br>        <sub>个人微信</sub>      </a><br>    </td>  </tr></tbody></table><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实用工具</title>
      <link href="posts/7450bfcb.html"/>
      <url>posts/7450bfcb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="颜色表"><a href="#颜色表" class="headerlink" title="颜色表"></a>颜色表</h2><p>晚上的天空配色方案：<a href="https://peiseka.com/index-index-peise-id-1232.html">https://peiseka.com/index-index-peise-id-1232.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颜色样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuepress-theme-hope主题扩展</title>
      <link href="posts/f554e8a6.html"/>
      <url>posts/f554e8a6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vuepress-theme-hope主题"><a href="#vuepress-theme-hope主题" class="headerlink" title="vuepress-theme-hope主题"></a>vuepress-theme-hope主题</h2><h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><p>在markdown文件里引入组件（容器）</p><h3 id="自定义注册组件"><a href="#自定义注册组件" class="headerlink" title="自定义注册组件"></a>自定义注册组件</h3><p>src.vuepress\components\NavCard.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;el-row :gutter="30"&gt;        &lt;el-col :xs="24" :sm="24" :md="12" :lg="8" :xl="8" v-for="(cardObj, index) in cardArr" :key="index"            style="margin-top:20px;height:100px;width:100%;overflow:auto;"&gt;            &lt;!-- &lt;el-link class="link-style" :underline="false" target="_blank" :href="cardObj.url" &gt; --&gt;            &lt;!-- &lt;el-card class="box-card" shadow="always" :body-style="{ padding:'5px' }" &gt; --&gt;            &lt;el-card shadow="never" :body-style="{ padding: '20px' }"&gt;                &lt;el-row class="box-card-header"&gt;                    &lt;el-col :xs="12" :sm="12" :md="12" :lg="12" :xl="12" style="padding:0px;"&gt;                        &lt;img style="width:30px;height:30px;text-align:left;" :src="$withBase(cardObj.icon)"                            :alt="cardObj.title" /&gt;                    &lt;/el-col&gt;                    &lt;el-col :xs="12" :sm="12" :md="12" :lg="12" :xl="12" style="padding:0px;"&gt;                        &lt;div style="text-align:right;"&gt;                            &lt;el-tooltip effect="dark" :content="cardObj.desc" placement="bottom"&gt;                                &lt;el-button :type="type" plain                                    @click.native="gotoSite(cardObj.url)"&gt;{{ cardObj.title }}&lt;/el-button&gt;                            &lt;/el-tooltip&gt;                        &lt;/div&gt;                    &lt;/el-col&gt;                &lt;/el-row&gt;                &lt;el-row class="box-card-body"&gt;                    &lt;div style="font-size:10px;color:#999999"&gt;{{ cardObj.desc }}&lt;/div&gt;                &lt;/el-row&gt;            &lt;/el-card&gt;            &lt;!-- &lt;/el-link&gt; --&gt;        &lt;/el-col&gt;    &lt;/el-row&gt;&lt;/template&gt;&lt;script&gt;export default {    name: "NavCard",    components: {},    props: {        arr: {            type: String,            default: ''        }    },    data() {        return {            cardArr: JSON.parse(this.arr),            type: 'success',        }    },    methods: {        gotoSite(url) {            // console.log(url);            // 在新标签页打开            window.open(url, '_blank').location;        },    },}&lt;/script&gt;&lt;style&gt;.link-style {    width: 100%;    height: 100%;    padding: 0px;}.box-card {    width: 100%;    height: 100%;}.box-card-header {    width: 100%;    height: 50%;    margin-bottom: 1px;    padding: 0px;}.box-card-body {    width: 100%;    height: 50%;    margin-top: 1px;    padding: 0px;}.el-card {    border-radius: 10px;    border: none;    background-color: #F6F6F6;    box-shadow: 0px 1px 5px 4px #0000001a;}.el-card:hover {    transform: scale(1.03);     /* boder-top: none; */    /* background-color: #FDF853; */    background-color: #98fb98;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建src.vuepress\client.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 客户端增强配置文件-https://v2.vuepress.vuejs.org/zh/guide/migration.html#%E7%BA%A6%E5%AE%9A%E6%96%87%E4%BB%B6%E5%8F%98%E6%9B%B4</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineClientConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@vuepress/client"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">"element-plus"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"element-plus/dist/index.css"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">enhance</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> siteData <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 引入Element-plus组件库</span>    <span class="token comment">// 【引入的主要目的不是在MD文档中使用Element的组件，主要是为了编写自己的组件】</span>    <span class="token comment">// 【自己写的组件被registerComponentsPlugin插件引入全局在进行使用】</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config.ts插件配置中配置</p><pre class="line-numbers language-none"><code class="language-none">// 注册全局组件的插件    registerComponentsPlugin({      componentsDir: path.resolve(__dirname, "./components"),    }),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时需要在config.ts头部引入</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> registerComponentsPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@vuepress/plugin-register-components"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getDirname<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@vuepress/utils"</span><span class="token punctuation">;</span><span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">getDirname</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就可以在src.vuepress\components文件夹下自由引入相应的组件了</p><p>例如引入src.vuepress\components\NavCard.vue组件：</p><pre class="line-numbers language-none"><code class="language-none">---# # 当前页面内容标题title: 友链# 当前页面图标icon: link# 分类category:  - 友链# 标签tag:  - 博客链接sticky: false# 是否收藏在博客主题的文章列表中，当填入数字时，数字越大，排名越靠前。star: false# 是否将该文章添加至文章列表中article: false# 是否将该文章添加至时间线中---## 博客推荐&lt;NavCard arr='[{"title":"keney","url":"https://nnxx.me/","desc":"基于hexo-matery搭建的博客","icon":"https://pic.imgdb.cn/item/640d9bf1f144a010073218ac.png"}&gt;&lt;/NavCard&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图：</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304091737197.png" alt="image-20230409171516473"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>src.vuepress\components\MyLinks.vue</p><p>MyLinks.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup lang="ts"&gt;import { document } from '../data/document.js';import { friend } from '../data/friend.js';import { tools } from '../data/tools.js';const props = defineProps&lt;{  type: string;  src: string;}&gt;();let linkData = document;switch (props.src) {  case 'document':    linkData = document;    break;  case 'tools':    linkData = tools;    break;  case 'friend':    linkData = friend;    break;  default:    linkData = document;}&lt;/script&gt;&lt;template&gt;  &lt;div class="MyLinks project-panel" v-if="props.type"&gt;    &lt;template v-if="linkData.length &gt; 0"&gt;      &lt;template v-for="(item, index) in linkData"&gt;        &lt;a          class="linkWrapper project"          target="_blank"          :class="`project${index % 9}`"          :href="item.href"          :key="index"          v-if="item.type.indexOf(props.type) &gt; -1"        &gt;          &lt;img class="image" :src="item.cover" /&gt;          &lt;div class="name"&gt;            {{ item.name }}          &lt;/div&gt;          &lt;div class="desc"&gt;            {{ item.desc }}          &lt;/div&gt;        &lt;/a&gt;      &lt;/template&gt;    &lt;/template&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style lang="scss" scoped&gt;a.linkWrapper {  text-decoration: none;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src.vuepress\data\friend.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> friend <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'keney'</span><span class="token punctuation">,</span>    desc<span class="token operator">:</span> <span class="token string">'博客'</span><span class="token punctuation">,</span>    href<span class="token operator">:</span> <span class="token string">'https://hisnxg.github.io/'</span><span class="token punctuation">,</span>    cover<span class="token operator">:</span> <span class="token string">'/navicon/r2coding.png'</span><span class="token punctuation">,</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'friend'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* {  name: 'xxxx',  desc: 'xxxx',  href: 'xxxx',  cover: 'xxxx',  type: ['xxx'],}, */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ahout.md引入：</p><pre class="line-numbers language-none"><code class="language-none">---icon: youlian---# 友链::: tip 欢迎交换友情链接:::&lt;MyLinks type="friend" src="friend"/&gt;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304091737199.png" alt="image-20230409164014787"></p><p>参考：<a href="https://github.com/mo7cc/BlogSource">https://github.com/mo7cc/BlogSource</a></p><h3 id="自定义链接"><a href="#自定义链接" class="headerlink" title="自定义链接"></a>自定义链接</h3><p>src.vuepress\containers\projects.ts</p><p>projects.ts：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> yaml <span class="token keyword">from</span> <span class="token string">'js-yaml'</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token class-name">Token</span> <span class="token keyword">from</span> <span class="token string">'markdown-it/lib/token.js'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> withBase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span>  icon<span class="token operator">:</span> <span class="token builtin">string</span>  name<span class="token operator">:</span> <span class="token builtin">string</span>  desc<span class="token operator">:</span> <span class="token builtin">string</span>  link<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment">/** * 渲染容器列表 * @param tokens * @param idx * @returns */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">renderProjects</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tokens<span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> nesting<span class="token operator">:</span> tokenNesting<span class="token punctuation">,</span> info<span class="token operator">:</span> tokenInfo <span class="token punctuation">}</span> <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>  <span class="token comment">// 渲染开头的 ':::' 标记</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenNesting <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> yamlStr <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> info <span class="token punctuation">}</span> <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">'container_projects_close'</span><span class="token punctuation">)</span> <span class="token keyword">break</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">)</span> <span class="token keyword">continue</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">'fence'</span> <span class="token operator">&amp;&amp;</span> info <span class="token operator">===</span> <span class="token string">'yaml'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 是代码块类型，并且是yaml代码</span>        yamlStr <span class="token operator">=</span> content      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>yamlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> dataObj <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>yamlStr<span class="token punctuation">)</span> <span class="token comment">// 将yaml字符串解析成js对象</span>      <span class="token keyword">let</span> dataList<span class="token operator">:</span> Project<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 正确解析出数据对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          dataList <span class="token operator">=</span> dataObj        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          dataList <span class="token operator">=</span> dataObj<span class="token punctuation">.</span>data        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment">// 判断是否有数据</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dataList <span class="token operator">&amp;&amp;</span> dataList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token function-variable function">getProjectItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>          project<span class="token operator">:</span> Project<span class="token punctuation">,</span>          index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>          <span class="token keyword">type</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>        <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> isFriends <span class="token operator">=</span> <span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">'friends'</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">              &lt;a class="project project</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index <span class="token operator">%</span> <span class="token number">9</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"                href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">withBase</span><span class="token punctuation">(</span>project<span class="token punctuation">.</span>link<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>isFriends <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token string">'rel="noopener noreferrer"'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                target="_blank"&gt;                &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">withBase</span><span class="token punctuation">(</span>project<span class="token punctuation">.</span>icon<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"                  alt="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="image" /&gt;                &lt;div class="name"&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;                &lt;div class="desc"&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token punctuation">.</span>desc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;              &lt;/a&gt;            </span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> <span class="token function-variable function">getProjects</span> <span class="token operator">=</span> <span class="token punctuation">(</span>projects<span class="token operator">:</span> Project<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> projectsStr <span class="token operator">=</span> <span class="token string">''</span>          projects<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            projectsStr <span class="token operator">+=</span> <span class="token function">getProjectItem</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> projectsStr        <span class="token punctuation">}</span>        <span class="token keyword">const</span> <span class="token keyword">type</span> <span class="token operator">=</span> tokenInfo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="project-panel"&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getProjects</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 渲染':::' 结尾</span>    <span class="token keyword">return</span> <span class="token string">'&lt;/div&gt;'</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义容器需要在packge.json中引入依赖包</p><pre class="line-numbers language-none"><code class="language-none">"js-yaml": "^4.1.0",<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src.vuepress\utils.ts</p><p>增加utils.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">withBase</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>  <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token string">'/'</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> base <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> path  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src.vuepress\config.ts</p><p>在config.ts中插件配置</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// VuePress插件配置</span><span class="token comment">// 自定义容器插件</span>  <span class="token function">containerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">'projects'</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">renderProjects</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在config.ts头部引入</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&gt;</span><span class="token operator">*</span><span class="token comment">// VuePress插件配置*</span><span class="token operator">&gt;</span><span class="token operator">*</span><span class="token comment">// 自定义容器插件*</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> containerPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@vuepress/plugin-container'</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> renderProjects <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./containers/projects'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>通过yaml方式处理，显示会多出代码块，就需要在自定义样式中隐藏掉</p><p>src.vuepress\styles\index.scss：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.project-panel</span> <span class="token punctuation">{</span>  <span class="token selector">a</span> <span class="token punctuation">{</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token selector">.project</span> <span class="token punctuation">{</span>    <span class="token selector">.image</span> <span class="token punctuation">{</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token selector">.language-yaml</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在about.md文件中添加</p><pre class="line-numbers language-none"><code class="language-none">---toc: falsebreadcrumb: false---# 关于本站一个基于 VuePress 的个人博客。## 服务提供本站由以下内容提供服务::: projects```yaml- icon: https://image.liubing.me/2023/02/11/7f17f3cf426c3.png  name: Cloudflare  desc: 提供免费的 CDN 服务。  link: https://www.cloudflare.com/- icon: https://image.liubing.me/2023/02/11/a6de6381e4ae6.png  name: Contabo  desc: VPS 所属供应商。  link: https://contabo.com/- icon: https://image.liubing.me/2023/02/11/50994f9710667.ico  name: 宝塔 Linux 面板  desc: 用来管理 VPS  link: https://cn.vuejs.org/- icon: https://vuepress.vuejs.org/hero.png  name: VuePress  desc: 博客驱动引擎。  link: https://vuepress.vuejs.org/zh/- icon: https://theme-hope.vuejs.press/logo.png  name: VuePress Theme Hope  desc: 本站博客所用主题  link: https://theme-hope.vuejs.press/zh/- icon: https://image.liubing.me/2023/02/11/a7643dcbbc234.png  name: Buddy  desc: 本站自动化打包构建发布工具。  link: https://buddy.works- icon: https://image.liubing.me/2023/02/05/834597e9e927e.png  name: Waline  desc: 本站评论所用服务。  link: https://waline.js.org/```:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果跟上图一样</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>在主题插件中配置：</p><p>src.vuepress\theme.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">comment<span class="token operator">:</span> <span class="token punctuation">{</span>  provider<span class="token operator">:</span> <span class="token string">"Waline"</span><span class="token punctuation">,</span>  serverURL<span class="token operator">:</span> <span class="token string">"自己搭建的walineAPI接口地址"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304091737200.png" alt="image-20230409173318195"></p><p>参考：<a href="https://github.com/walinejs/waline">https://github.com/walinejs/waline</a></p><p><a href="https://plugin-comment2.vuejs.press/zh/">https://plugin-comment2.vuejs.press/zh/</a></p><h3 id="订阅插件"><a href="#订阅插件" class="headerlink" title="订阅插件"></a>订阅插件</h3><p>在主题插件中配置：</p><p>src.vuepress\theme.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//订阅插件SSR</span>   feed<span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token comment">// 插件选项</span>     atom<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     json<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     rss<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="底部页脚（备案信息）"><a href="#底部页脚（备案信息）" class="headerlink" title="底部页脚（备案信息）"></a>底部页脚（备案信息）</h4><p>在src.vuepress\theme.ts配置中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> footer_HTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="container-box"&gt; &lt;div class="footer-btn"&gt;   &lt;a class="footer-icp" href="https://beian.miit.gov.cn" target="_blank"&gt;   &lt;img src="icp.png"&gt;   鄂ICP备2021号   &lt;/a&gt;   &lt;/div&gt; &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后启用页脚即可：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 全局设置页脚信息</span>footer<span class="token operator">:</span> footer_HTML<span class="token punctuation">,</span><span class="token comment">// 显示页脚</span>displayFooter<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果只想局部显示，可以在相应的markdown文件头部添加footer</p><p>参考：<a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html">https://theme-hope.vuejs.press/zh/guide/layout/footer.html</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如有报错根据提示，引入相应的依赖，一般在package.json中配置。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：</p><p><a href="https://theme-hope.vuejs.press/zh/">vuepress-theme-hope</a></p><p>vuepress-theme-hope仓库：<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope">https://github.com/vuepress-theme-hope/vuepress-theme-hope</a></p><p><a href="https://github.com/mo7cc/BlogSource">https://github.com/mo7cc/BlogSource</a></p><p><a href="https://github.com/liub1934/liubing.me">https://github.com/liub1934/liubing.me</a></p>]]></content>
      
      
      <categories>
          
          <category> vuerpess </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展 </tag>
            
            <tag> vuepress-theme-hope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置多图床仓库</title>
      <link href="posts/7dbd4c.html"/>
      <url>posts/7dbd4c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>想使用不需要直接购买服务器就可以存储图片，并且可以很方便使用外链访问到图片资源。这里就有了typora+PicGo两者结合的工具</p><h2 id="PicGo配置多图床"><a href="#PicGo配置多图床" class="headerlink" title="PicGo配置多图床"></a>PicGo配置多图床</h2><p>以七牛云为例：</p><blockquote><p>官网：<a href="https://portal.qiniu.com/">https://portal.qiniu.com/</a></p><p>七牛云有10G免费存储空间和10G CDN静态资源加速</p><p>注意：CDN超额会需要付费的。</p></blockquote><p>参考此文：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A">配置手册 | PicGo</a></p><p>PicGo配置如下图：</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652112.png" alt="image-20230408153157066"></p><p>个人密钥：</p><p>参考：<a href="https://portal.qiniu.com/user/key">七牛云 - 密钥管理 (qiniu.com)</a></p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652114.png" alt="image-20230408153612643"></p><p>空间名称：</p><p>我自定义的空间名称为：<strong>nxg-img</strong></p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652115.png" alt="image-20230408153712120"></p><p>存储区域参考这里：<a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">存储区域_产品简介_对象存储 - 七牛开发者中心 (qiniu.com)</a></p><p>图片存储路径：</p><p>我使用typora编辑器，就自定义了 <strong>typora</strong>目录</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652116.png" alt="image-20230408153902349"></p><blockquote><p>注意：</p><p>自定义域名，免费的的cdn只提供http协议，使用外链域名时，需要填写http，而不是https</p><p>网址后缀的作用是：用到了七牛的图片处理工具的时候会用到的一些处理参数，比如图片瘦身</p></blockquote><p>如图：</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652117.png" alt="image-20230408154227916"></p><p>域名绑定：</p><p>自己购买的域名，如果没有可以使用官方提供的。</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652118.png" alt="image-20230408160523741"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>GitHub图床配置</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652119.png" alt="image-20230408155030702"></p><p>cdn加速GitHub图床：</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/github用户名/仓库名@主分支/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">GitHub配置 | PicGo</a></p><p>gitee图床配置：</p><p><img src="https://cdn.lxip.top/gh/imnxg/imgbeds//posts/202304081652120.png" alt="image-20230408155204806"></p><p>参考：<a href="https://github.com/lizhuangs/picgo-plugin-gitee-uploader.git">https://github.com/lizhuangs/picgo-plugin-gitee-uploader.git</a></p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：</p><p>GitHub仓库：<a href="https://github.com/Molunerfinn/PicGo">Molunerfinn/PicGo</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A">配置手册 | PicGo</a></p><p><a href="https://molunerfinn.com/PicGo/">PicGo (molunerfinn.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请免费域名dns解析cdn加速</title>
      <link href="posts/d85df7a9.html"/>
      <url>posts/d85df7a9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：<a href="https://iweek.eu.org/posts/49683.html">申请免费域名并配置DNS解析及CDN加速 | 倚栏听风 (iweek.eu.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 域名-cdn-dns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdn </tag>
            
            <tag> dns解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github代码备份到gitee仓库-工作流</title>
      <link href="posts/996e7bfe.html"/>
      <url>posts/996e7bfe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="大概思路"><a href="#大概思路" class="headerlink" title="大概思路"></a>大概思路</h2><p>从本地（windows）使用git将代码提交到GitHub某仓库，然后触发某仓库GitHub工作流，使其将代码推送到gitee仓库。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><p>需要会使用git</p></li><li><p>熟悉GitHub（配置、工作流）</p></li></ul><h2 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h2><p>关于GitHub工作流与密钥配置对应图：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336659.png" alt="image-20230404224357484"></p><p>1.配置本地密钥到gitee，至于怎么配置可以参考<a href="../gitMore">git多账号配置</a></p><p>2.配置GitHub公钥</p><p>该公钥要与gitee配置公钥对应上</p><p>本地密钥id_rsa_gitee.pub内容复制到GitHub中</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336661.png" alt="image-20230404221056949"></p><p>粘贴到如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336663.png" alt="image-20230404221134689"></p><p>同理将上的公钥复制粘贴到gitee上</p><p>配置示例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336664.png" alt="image-20230404222501712"></p><p>3.配置GitHub仓库密钥</p><p>需要在GitHub仓库添加对应secrets</p><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336665.png" alt="image-20230404225010003"></p><blockquote><p>注意：此处的私钥要与gitee配置的公钥成对存在</p></blockquote><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336666.png" alt="image-20230404225213255"></p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：<a href="https://github.com/yanglbme/gitee-pages-action">yanglbme/gitee-pages-action</a></p><p><a href="./gitee-pages-action">gitee-pages-action</a></p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><pre class="line-numbers language-none"><code class="language-none">WARNING: StrictHostKeyChecking disabledCloning into bare repository 'hexo-theme-gitee-blog.git'...SOURCE=git@github.com:hisnxg/hexo-theme-gitee-blog.gitDESTINATION=git@gitee.com:hisnxg/hisnxg.gitDRY RUN=falseWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.git@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.fatal: not a git repository (or any parent up to mount point /github)Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因：gitee配置的此公钥要与GitHub公钥成对存在。</p><p>添加即可解决</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202304042336668.png" alt="image-20230404223214170"></p><p>如未解决可参考：<a href="https://github.com/yanglbme/gitee-pages-action/issues/29">https://github.com/yanglbme/gitee-pages-action/issues/29</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题扩展</title>
      <link href="posts/b1cab2ec.html"/>
      <url>posts/b1cab2ec.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="butterfly主题"><a href="#butterfly主题" class="headerlink" title="butterfly主题"></a>butterfly主题</h2><h2 id="搭建朋友圈"><a href="#搭建朋友圈" class="headerlink" title="搭建朋友圈"></a>搭建朋友圈</h2><blockquote><p>官方文档：<a href="https://fcircle-doc.yyyzyyyz.cn/#/backenddeploy">https://fcircle-doc.yyyzyyyz.cn/#/backenddeploy</a></p></blockquote><h2 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a><a href="https://fcircle-doc.yyyzyyyz.cn/#/backenddeploy?id=github%E9%83%A8%E7%BD%B2">github部署</a></h2><blockquote><p><strong>注意</strong>：如果前端部署采用<a href="https://fcircle-doc.yyyzyyyz.cn/#/frontenddeploy">带管理面板的前端方案</a>，则fork时<strong>不要修改仓库名称</strong>，否则会导致管理面板部分功能不可用。</p></blockquote><h3 id="github-sqlite部署"><a href="#github-sqlite部署" class="headerlink" title="github+sqlite部署"></a><a href="https://fcircle-doc.yyyzyyyz.cn/#/backenddeploy?id=githubsqlite%E9%83%A8%E7%BD%B2">github+sqlite部署</a></h3><p>这是默认的部署方式，即：github+sqlite+vercel</p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>Twikoo评论</p><blockquote><p>官方文档：<a href="https://twikoo.js.org/">https://twikoo.js.org/</a></p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote><p>简单</p><ul><li>免费搭建（使用云开发 / Vercel / 私有服务器作为评论后台）</li><li>简单部署（支持云开发 / Vercel 一键部署）</li></ul></blockquote><blockquote><p>注意：在阅读官方教程部署时，可能会遇到一些问题。在此简单记录一下，如果你是使用vercel部署，在拉取代码到vercel时，使用的是<a href="https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/main/src/server/vercel-min%EF%BC%8C%E8%BF%99%E5%8F%AA%E6%98%AFtwikoo%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%9B%B4%E6%8E%A5fork%E5%AE%98%E6%96%B9t%E7%9A%84wikoo%E4%BB%93%E5%BA%93%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8vercel%E9%83%A8%E7%BD%B2%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E3%80%82">https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/main/src/server/vercel-min，这只是twikoo仓库的一个分支，如果你直接fork官方t的wikoo仓库，然后使用vercel部署就会出现问题。</a></p></blockquote><p>参考：<a href="https://blog.zhheo.com/p/2e6bbbd0.html">https://blog.zhheo.com/p/2e6bbbd0.html</a></p><p><a href="https://butterfly.js.org/posts/ceeb73f/">https://butterfly.js.org/posts/ceeb73f/</a></p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：<a href="https://noionion.top/12280.html">https://noionion.top/12280.html</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> 扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery主题配置</title>
      <link href="posts/7e0904da.html"/>
      <url>posts/7e0904da.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>熟悉css</li><li>熟悉html</li><li>熟悉js</li></ul><blockquote><p>如果你不熟悉上述知识，你只能照搬，并且遇到问题是需要花费大量时间才能解决。对于想对博客进行扩展，这是必备的。</p></blockquote><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</a></p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><h3 id="文章创建"><a href="#文章创建" class="headerlink" title="文章创建"></a>文章创建</h3><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><pre class="line-numbers language-none"><code class="language-none">--- title: {{ title }} date: {{ date }} top: false # 文章置顶cover: false toc: true  # 是否显示文章目录snow: false mathjax: false author: nxgimg: sticky: true  coverImg: password: summary: # 摘要category:  - hexotags:  - hexo  - matery---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="美化扩展"><a href="#美化扩展" class="headerlink" title="美化扩展"></a>美化扩展</h2><h3 id="适配夜间模式"><a href="#适配夜间模式" class="headerlink" title="适配夜间模式"></a>适配夜间模式</h3><p>参考：<a href="https://cloud.tencent.com/developer/article/1866962">https://cloud.tencent.com/developer/article/1866962</a></p><h3 id="github-badge"><a href="#github-badge" class="headerlink" title="github-badge"></a>github-badge</h3><p>添加方法：</p><p>简单暴力的方法，在 footer.ejs 文件中添加以下内容（在适当的位置添加）：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://hexo.io/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>由 Hexo 强力驱动<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Powered<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hexo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>静态网页托管于 GitHub Pages 和 Coding Pages 和 Gitee Pages<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hosted<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-brightgreen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>GitHub &amp; Coding &amp; Gitee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cloud.tencent.com/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>腾讯云提供域名相关服务<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>DNS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-blueviolet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Tencent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.jsdelivr.com/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jsDelivr 提供 CDN 加速服务<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>CDN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-orange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>jsDelivr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://blinkfox.github.io/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>站点使用 Matery主题<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Theme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Matery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://creativecommons.org/licenses/by-nc-sa/4.0/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>本站点采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-copyright<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-lightgrey<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>BY-NC-SA 4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://996.icu/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>支持 996.ICU<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>996.ICU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>UV<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-orange<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>PV<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-brightgreen<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-badge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-subject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>WordCount<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge-value bg-blueviolet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%= totalcount(site) %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后添加 css 样式，自己选择代码的添加位置，可以直接放在 footer.ejs 文件中，也可以放在 my.css 文件中，代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在页脚加上 GitHub badge */</span><span class="token selector">.github-badge</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span>    <span class="token property">text-shadow</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span>13px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#ABBAC3<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .badge-subject</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#4D4D4D<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>4px 4px 4px 6px<span class="token punctuation">;</span>    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span>    <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .badge-value</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>4px 6px 4px 4px<span class="token punctuation">;</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span>    <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-brightgreen</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#4DC820 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-orange</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-yellow</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#D8B024 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-blueviolet</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#8833D7 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-pink</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#F26BAE <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-red</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#e05d44 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-blue</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#007EC6 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-lightgrey</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#9F9F9F <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-grey, .github-badge .bg-gray</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#555 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.github-badge .bg-lightgrey, .github-badge .bg-lightgray</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#9f9f9f <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 在页脚加上 GitHub badge */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行本地调试，查看效果即可，本地调试好后，在进行部署的相关操作。</p><h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><h3 id="Twikoo评论"><a href="#Twikoo评论" class="headerlink" title="Twikoo评论"></a><a href="https://twikoo.js.org/">Twikoo</a>评论</h3><p><a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2</a></p><p>需要注意，在使用vercel部署时，输出目录为 ./dist/ ,需要自己设置一下</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://www.mobaijun.com/posts/3211381432.html">Windows 环境下搭建一个 Hexo 博客</a></p><p><a href="https://yafine66.gitee.io/posts/12b4.html">Matery 主题个性化修改篇</a></p><p><a href="https://chuchendjs.github.io/posts/35285/">matery 代码高亮，跳过渲染等问题</a></p><p><a href="https://wxyhgk.gitee.io/hexo-an/">hexo增加黑暗模式</a></p><p><a href="https://nekodeng.gitee.io/posts/blog-night-mode.html#toc-heading-1">关于给hexo博客适配全局深色模式</a></p><p><a href="https://cloud.tencent.com/developer/article/1866962">Matery主题添加暗色模式</a> –&gt;有效</p><p><a href="https://blog.bluesky01st.eu.org/posts/d76019f8.html#toc-heading-1">自定义Matery主题教程</a> –&gt;有部分参考</p><p><a href="https://lovelijunyi.gitee.io/posts/b8ec.html">Matery主题搭建与优化教程超详细解析</a></p><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p><a href="https://markdown.com.cn/">Markdown 语法教程</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql问题</title>
      <link href="posts/24567d40.html"/>
      <url>posts/24567d40.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题1-提示1251-Client-does-not-support-authentication-protocol-requested-by-server"><a href="#问题1-提示1251-Client-does-not-support-authentication-protocol-requested-by-server" class="headerlink" title="问题1-提示1251- Client does not support authentication protocol requested by server"></a>问题1-提示1251- Client does not support authentication protocol requested by server</h2><p>原因：mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password, </p><p>解决办法：</p><pre class="line-numbers language-none"><code class="language-none">方法1.升级navicat驱动；方法2.把mysql用户登录密码加密规则还原成mysql_native_password. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用命令方式解决：</p><pre class="line-numbers language-none"><code class="language-none">方法1：# 更新user为root，host为% 的密码为123456ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456'; # 更新user为root，host为localhost 的密码为123456ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';# 方法2：# 修改加密规则 （这行我没有写，不过貌似也可以）ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; # 更新一下用户的密码 ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';  #刷新权限FLUSH PRIVILEGES; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：<a href="https://blog.csdn.net/pengfeng111833/article/details/124399404">https://blog.csdn.net/pengfeng111833/article/details/124399404</a></p><p>参考2：<a href="https://huaweicloud.csdn.net/63355d9ed3efff3090b54464.html">https://huaweicloud.csdn.net/63355d9ed3efff3090b54464.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7.9使用</title>
      <link href="posts/5baca9db.html"/>
      <url>posts/5baca9db.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><h3 id="1-JDK安装"><a href="#1-JDK安装" class="headerlink" title="1.JDK安装"></a>1.JDK安装</h3><p>这里安装JDK版本jdk-8u11-linux-x64.tar.gz</p><p>注：在登录centos服务器之后切换到根（root）目录下</p><pre class="line-numbers language-none"><code class="language-none">cd /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.在root权限下，在根目录下创建文件夹</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p /usr/local/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到/usr/local/java目录下</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将该jdk-8u11-linux-x64.tar.gz压缩包上传到当前位置</p><p>2.解压jdk-8u11-linux-x64.tar.gz压缩包</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf ./jdk-8u11-linux-x64.tar.gz -C /usr/local/java/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后切换到根目录下</p><pre class="line-numbers language-none"><code class="language-none">cd /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.编辑Linux系统中环境变量所在文件</p><pre class="line-numbers language-none"><code class="language-none">vi /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在文件最后加入环境变量设置，加入后保存文件</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/local/java/jdk1.8.0_11 #这是自己的jdk所在位置exportCLASSPATH=.:$JAVA_HOME/jre/lib/dt.jar:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.让环境变量生效</p><pre class="line-numbers language-none"><code class="language-none">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.测试JDK是否已经配置好</p><pre class="line-numbers language-none"><code class="language-none">#执行命令java -version#显示如下java version "1.8.0_11"Java(TM) SE Runtime Environment (build 1.8.0_11-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)#执行命令javac-version#显示如下javac 1.8.0_11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2 .Docker安装"></a>2 .Docker安装</h2><p>在拉去之前，先配置镜像加速器</p><p>阿里云镜像获取地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%8C%E7%99%BB%E9%99%86%E5%90%8E%EF%BC%8C%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E9%80%89%E4%B8%AD%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%9C%B0%E5%9D%80%E4%BA%86%EF%BC%9A">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了：</a></p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120108842.png" alt="image-20221116231427095"></p><p>因为工作的需要,需要把docker 启动后的路径改成/data,所以就会用到:<em>/etc/docker/daemon.json</em> 是docker 的配置<em>文件</em>,默认是没有的,需要我们手动创建,可配置项<em>如下:</em></p><pre class="line-numbers language-none"><code class="language-none">#在根目录下cd /#创建docker目录mkdir -p /etc/docker# 切换到docker目录下cd /etc/docker# 创建daemon.jsontouch daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后打开下面的配置文件：</p><pre class="line-numbers language-none"><code class="language-none"># 在根目录下打开该配置文件vi /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在/etc/docker/daemon.json文件末尾增加如下内容：</p><pre class="line-numbers language-none"><code class="language-none">{  "registry-mirrors": ["https://你的ID.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>修改完daemon.json文件后，需要让这个文件生效</p><p>a.修改完成后reload配置文件</p><p>sudo systemctl daemon-reload</p><p>b.重启docker服务</p><p>sudo systemctl restart docker.service</p><p>c.查看状态</p><p>sudo systemctl status docker -l</p><p>d.查看服务</p><p>sudo docker info</p></blockquote><p><strong><em>为什么配置这个呢？原因是docker下载镜像速度慢，需要配置国内镜像加速。</em></strong></p><p>Docker可以运行在MAC、Windows、CentOS、UBUNTU等操作系统上，本课程基于CentOS7安装Docker</p><p>官网：<a href="https://www.docker.com/">https://www.docker.com</a></p><pre class="line-numbers language-none"><code class="language-none">#1、yum包更新到最新yum update#2、安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的yum install -y yum-utils device-mapper-persistent-data lvm2#3、设置yum源yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo#4、安装docker，出现输入的界面都按 yyum install -y docker-ce#5、查看docker版本，验证是否验证成功docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1docker命令"><a href="#2-1docker命令" class="headerlink" title="2.1docker命令"></a>2.1docker命令</h4><p>1.进程相关命令</p><p>启动docker服务:</p><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止docker服务:</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启docker服务:</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看docker服务状态:</p><pre class="line-numbers language-none"><code class="language-none">systemctl status docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开机启动docker服务:</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.镜像相关命令</p><p>镜像命令包括如下内容：查看镜像、搜索镜像、拉取镜像、删除镜像</p><p>查看镜像:查看本地所有的镜像</p><pre class="line-numbers language-none"><code class="language-none">docker imagesdocker images –q #查看所用镜像的id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>搜索镜像:从网络中查找需要的镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search 镜像名称docker search redis #查找redis镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为名称:版本号，如果版本号不指定则是最新的版本lastest。</p><p>如果不知道镜像版本，可以去dockerhub搜索对应镜像查看。</p><pre class="line-numbers language-none"><code class="language-none">docker pull 镜像名称docker pull redis #下载最新版本redisdocker pull redis:5.0 #下载5.0版本redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除镜像:删除本地镜像</p><pre class="line-numbers language-none"><code class="language-none">docker rmi 镜像id #删除指定本地镜像docker images -q #查看所有的镜像列表dockerrmi `docker images -q` #删除所有本地镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.容器相关命令</p><p>查看容器、创建容器、进入容器、启动容器、停止容器、删除容器、查看容器信息</p><p>查看容器</p><pre class="line-numbers language-none"><code class="language-none">docker ps #查看正在运行的容器docker ps –a #查看所有容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建并启动容器</p><pre class="line-numbers language-none"><code class="language-none">docker run 参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><p>-i：保持容器运行。通常与-t同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p><p>-t：为容器重新分配一个伪输入终端，通常与-i同时使用。</p><p>-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用dockerexec进入容器。退出后，容器不会关闭。</p><p>-it创建的容器一般称为交互式容器，-id创建的容器一般称为守护式容器</p><p>–name：为创建的容器命名。</p><pre class="line-numbers language-none"><code class="language-none">docker run -it --name=c1 centos:7 /bin/bash #创建交互式容器docker run -id --name=c2 centos:7 #创建守护式容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：交互式容器，exit后容器自动关闭，守护式容器会在后台执行</p><p>进入容器</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it c2 /bin/bash #进入容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止容器</p><pre class="line-numbers language-none"><code class="language-none">docker stop 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动容器</p><pre class="line-numbers language-none"><code class="language-none">dockerstart容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p><pre class="line-numbers language-none"><code class="language-none">docker rm 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看容器信息</p><pre class="line-numbers language-none"><code class="language-none">docker inspect 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.Docker容器的数据卷</p><p>….</p><h2 id="3-Docker应用部署"><a href="#3-Docker应用部署" class="headerlink" title="3.Docker应用部署"></a>3.Docker应用部署</h2><p>3.1MySQL部署</p><p>分析</p><p>容器内的网络服务和外部机器不能直接通信</p><p>外部机器和宿主机可以直接通信宿主机和容器可以直接通信</p><p>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的端口，从而间接访问容器的服务。</p><p>这种操作称为：<strong>端口映射</strong></p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120108843.png" alt="image-20221117002336127"></p><p>1.搜索mysql镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.拉取mysql镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull mysql:5.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建容器，设置端口映射、目录映射</p><pre class="line-numbers language-none"><code class="language-none">#在/root目录下创建mysql目录用于存储mysql数据信息mkdir ~/mysqlcd ~/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker run -id \-p 3307:3306 \--name=c_mysql \-v $PWD/conf:/etc/mysql/conf.d \-v $PWD/logs:/logs \-v $PWD/data:/var/lib/mysql \-e MYSQL_ROOT_PASSWORD=123456 \mysql:5.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><p>-p  3307:3306：将容器的3306端口映射到宿主机的3307端口。</p><p>-v  $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的conf/my.cnf挂载到容器的 /etc/mysql/my.cnf 。配置目录</p><p>-v  $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs。日志目录</p><p>-v  $PWD/data:/var/lib/mysql：将主机当前目录下的data目录挂载到容器的/var/lib/mysql。数据目录</p><p>-e  MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码。</p><p>4.进入容器，操作</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it c_mysql /bin/bashmysql -u root -p123456show databases;create database db1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.2.Tomcat部署</p><p>1.搜索tomcat镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.拉取tomcat镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建容器，设置端口映射、目录映射</p><pre class="line-numbers language-none"><code class="language-none"># 在/root目录下创建tomcat目录用于存储tomcat数据信息mkdir ~/tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行下面的命令：</p><pre class="line-numbers language-none"><code class="language-none">docker run -id --name=c_tomcat \-p 8080:8080 \-v $PWD:/usr/local/tomcat/webapps \tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><p>-p 8080:8080：将容器的8080端口映射到主机的8080端口</p><p>-v $PWD:/usr/local/tomcat/webapps：将主机中当前目录挂载到容器的webapps</p><p>4.使用外部机器访问tomcat</p><p>3.3.Nginx部署</p><p>1.搜索nginx镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.拉取nginx镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建容器，设置端口映射、目录映射</p><pre class="line-numbers language-none"><code class="language-none"># 在root目录下创建nginx目录用于存储nginx数据信息mkdir ~/nginxcd ~/nginxmkdir confcd conf#在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容vim nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行下面的命令：</p><pre class="line-numbers language-none"><code class="language-none">user nginx;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events{worker_connections 1024;}http{    include /etc/nginx/mime.types;    default_type application/octet-stream;    log_formatmain '$remote_addr-$remote_user[$time_local]"$request"'                    '$status$body_bytes_sent"$http_referer"'                    '"$http_user_agent""$http_x_forwarded_for"';    access_log/var/log/nginx/access.log main;    sendfileon;    #tcp_nopushon;    keepalive_timeout 65;    #gzip on;    include /etc/nginx/conf.d/*.conf;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行下面的命令启动nginx容器：</p><pre class="line-numbers language-none"><code class="language-none">docker run -id --name=c_nginx \-p 80:80 \-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \-v $PWD/logs:/var/log/nginx \-v $PWD/html:/usr/share/nginx/html \nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.4.Redis部署</p><p>1.搜索redis镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.拉取redis镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull redis:5.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建容器，设置端口映射</p><pre class="line-numbers language-none"><code class="language-none">docker run -id --name=c_redis -p 6379:6379 redis:5.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.使用外部机器连接redis</p><pre class="line-numbers language-none"><code class="language-none">./redis-cli.exe -h 192.168.220.12 -p 6379keys *set name keneyget name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Dockerfile"><a href="#4-Dockerfile" class="headerlink" title="4.Dockerfile"></a>4.Dockerfile</h2><p>4.1docker镜像原理：</p><p>思考： </p><p>Docker 镜像本质是什么？ </p><p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？ </p><p>Docker 中一个tomcat镜像为什么有600MB，而一个tomcat安装包只有70多MB？ </p><p>操作系统组成部分： </p><p>进程调度子系统 </p><p>进程通信子系统 </p><p>内存管理子系统 </p><p>设备管理子系统 </p><p>文件管理子系统 </p><p>网络通信子系统 </p><p>作业控制子系统 </p><p>Linux文件系统由bootfs和rootfs两部分组成 </p><p>bootfs：包含bootloader（引导加载程序）和 kernel（内核） rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件 </p><p>不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120108844.png" alt="image-20221117193843478"></p><p>docker镜像原理 </p><p>Docker镜像是由特殊的文件系统叠加而成 </p><p>最底端是 bootfs，并使用宿主机的bootfs </p><p>第二层是 root文件系统rootfs,称为base image 然后再往上可以叠加其他的镜像文件 </p><p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的 视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。 </p><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。 </p><p>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120108845.png" alt="image-20221117193946995"></p><p>回答问题 </p><p>1.Docker 镜像本质是什么？ 是一个分层文件系统 </p><p>2.Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？ </p><p>Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其 他镜像层</p><p>3.Docker 中一个tomcat镜像为什么有600MB，而一个tomcat安装包只有70多MB？ 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外 暴露的tomcat镜像大小600多MB</p><p>4.2镜像制作</p><p>容器转换镜像</p><pre class="line-numbers language-none"><code class="language-none">docker commit 容器id 镜像名称:版本号docker save -o 压缩文件名称 镜像名称:版本号docker load –i 压缩文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120108846.png" alt="image-20221117194250515"></p><pre class="line-numbers language-none"><code class="language-none"># 创建tomcat镜像docker run -id --name=c_tomcat \-p 8080:8080 \-v $PWD:/usr/local/tomcat/webapps \tomcat# 进入tomcat镜像docker exec -it c_tomcat /bin/bash#创建a.txt b.txtcd ~touch a.txt b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行操作：</p><pre class="line-numbers language-none"><code class="language-none">#容器转镜像docker commit 28b8d4dc9744 lxs_tomcat:1.0#压缩镜像docker save -o lxs_tomcat.tar lxs_tomcat:1.0#删除原来镜像docker rmi lxs_tomcat:1.0#从压缩文件加载镜像docker load -i lxs_tomcat.tar#产生镜像docker run -it --name=new_tomcat lxs_tomcat:1.0 /bin/bash#进入查看内容docker exec -it c_tomcat /bin/bash#可以看到a.txt b.txt存在，而webapps/test不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dockerfile</p><p>概念 </p><p>Dockerfile 是一个文本文件 </p><p>包含了一条条的指令 </p><p>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像 </p><p>对于开发人员：可以为开发团队提供一个完全一致的开发环境 </p><p>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了 </p><p>对于运维人员：在部署时，可以实现应用的无缝移植 </p><p>参考Dochub网址：<a href="https://hub.docker.com/">https://hub.docker.com</a> ，比如centos和nginx镜像</p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息 用</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在 docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>容器启动命 令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命 令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来 源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式 ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字 的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可 以挂载的数 据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容 器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格 式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是 绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用 户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候 的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本 身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成 之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量 到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚 本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><hr><p>案例一：</p><p>自定义centos7镜像。 </p><p>要求： </p><ol><li>默认登录路径为 /usr</li><li>可以使用vim </li></ol><p>实现步骤 </p><p>定义父镜像：FROM centos:7 </p><p>定义作者信息：MAINTAINER lxs <a href="mailto:lxs@lxs.cn">lxs@lxs.cn</a> </p><p>执行安装vim命令： RUN yum install -y vim </p><p>定义默认的工作目录：WORKDIR /usr </p><p>定义容器启动执行的命令：CMD /bin/bash </p><p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本 .</p><pre class="line-numbers language-none"><code class="language-none">#具体代码mkdir ~/docker-filescd ~/docker-filesvim centos_dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>dockerfile具体内容</p><pre class="line-numbers language-none"><code class="language-none">FROM centos:7MAINTAINER lxs &lt;lxs@lxs.cn&gt;RUN yum install -y vimWORKDIR /usrCMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>build</p><pre class="line-numbers language-none"><code class="language-none">docker build -f ./centos_dockerfile -t lxs_centos:1 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-f：镜像文件 </p><p>-t：新镜像名 </p><p>. 寻址路径</p><pre class="line-numbers language-none"><code class="language-none">#进入看效果docker run -it --name=c2 lxs_centos:1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>案例二：发布springboot项目 </p><p>定义父镜像：FROM java:8</p><p>定义作者信息：MAINTAINER lxs <a href="mailto:lxs@163.com">lxs@163.com</a> </p><p>将jar包添加到容器： ADD springboot.jar app.jar </p><p>定义容器启动执行的命令：CMD [“java”,”-jar”,”app.jar”] </p><p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本 .</p><pre class="line-numbers language-none"><code class="language-none">FROM java:8MAINTAINER lxs &lt;lxs@163.com&gt;ADD springboot.jar app.jarCMD ["java","-jar","app.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>build</p><pre class="line-numbers language-none"><code class="language-none">docker bulid –f ./springboot_dockerfile –t app .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -id -p 9000:8080 app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-服务编排"><a href="#5-服务编排" class="headerlink" title="5.服务编排"></a>5.服务编排</h2><p>5.1. 概念</p><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启 动停止，维护的工作量会很大。来看下我们日常工作： </p><p>要从Dockerfile build image 或者去dockerhub拉取image </p><p>要创建多个container </p><p>要管理这些container（启动停止删除） </p><p>通过服务编排可以大量简化上面的工作服务编排：按照一定的业务规则批量管理容器</p><p>5.2 Docker Compose</p><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集中管理容器化应用的完整开发周期，包括服务 构建，启动和停止。使用步骤：</p><ol><li>利用 Dockerfile 定义运行环境镜像</li><li> 使用 docker-compose.yml 定义组成应用的各服务 </li><li>运行 docker-compose up 启动应用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120108847.png" alt="image-20221117200311623"></p><p>安装Docker Compose</p><pre class="line-numbers language-none"><code class="language-none"># Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose# 设置文件可执行权限chmod +x /usr/local/bin/docker-compose# 查看版本信息docker-compose -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载Docker Compose</p><pre class="line-numbers language-none"><code class="language-none"># 二进制包方式安装的，删除二进制文件即可rm /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编排nginx+springboot</p><p>需求：使用nginx反向代理到springboo应用</p><ol><li>创建docker-compose目录</li></ol><pre class="line-numbers language-none"><code class="language-none">mkdir ~/docker-composecd ~/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.编写 docker-compose.yml 文件</p><pre class="line-numbers language-none"><code class="language-none">version: '3'services:nginx:image: nginxports:- 80:80links:- appvolumes:- ./nginx/conf.d:/etc/nginx/conf.dapp:image: appexpose:- "8080"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.创建./nginx/conf.d目录</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p ./nginx/conf.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在./nginx/conf.d目录下 编写app.conf文件</p><pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    access_log off;        location / {    proxy_pass http://app:8080/hello;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.在~/docker-compose 目录下 使用docker-compose 启动容器</p><pre class="line-numbers language-none"><code class="language-none">docker-compose up -d # -d表示已守护模式启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>测试访问</li></ol><pre class="line-numbers language-none"><code class="language-none">http://192.168.220.12/hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-Docker私有仓库"><a href="#6-Docker私有仓库" class="headerlink" title="6.Docker私有仓库"></a>6.Docker私有仓库</h2><blockquote><p>Docker官方的Docker hub（<a href="https://hub.docker.com)是一个用于管理公共镜像的仓库,我们可以从上面拉/">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉</a> 取镜像 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们不希望将自己的镜 像放到公网当中， 那么这时我们就需要搭建自己的私有仓库来存储和管理自己的镜像</p></blockquote><p>6.1. 私有仓库搭建</p><pre class="line-numbers language-none"><code class="language-none"># 1、拉取私有仓库镜像docker pull registry# 2、启动私有仓库容器docker run -id --name=registry -p 5000:5000 registry# 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到{"repositories":[]} 表示私有仓库 搭建成功# 4、修改daemon.jsonvim /etc/docker/daemon.json# 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip{"insecure-registries":["私有仓库服务器ip:5000"]}{"insecure-registries":["192.168.220.12:5000"]}# 5、重启docker 服务systemctl restart dockerdocker start registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.2将镜像上传至私有仓库</p><pre class="line-numbers language-none"><code class="language-none"># 1、标记镜像为私有仓库的镜像docker tag centos:7 192.168.220.12:5000/centos:7# 2、上传标记的镜像docker push 192.168.220.12:5000/centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从私有仓库拉取镜像</p><pre class="line-numbers language-none"><code class="language-none">#拉取镜像docker pull 192.168.220.12:5000/centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>参考：<a href="https://www.cnblogs.com/yakniu/p/16329611.html">https://www.cnblogs.com/yakniu/p/16329611.html</a></p><p>参考：服务端口占用情况：<a href="https://www.leixue.com/qa/how-does-centos-check-port-occupancy">https://www.leixue.com/qa/how-does-centos-check-port-occupancy</a></p><p>参考mysql数据库问题：</p><p>【MySql】Navicat 连接数据库出现1251 - Client does not support authentication protocol …… 问题的解决方法：</p><p><a href="https://blog.csdn.net/pengfeng111833/article/details/124399404">https://blog.csdn.net/pengfeng111833/article/details/124399404</a></p><p><a href="https://blog.csdn.net/piupiu78/article/details/122468163">https://blog.csdn.net/piupiu78/article/details/122468163</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git多账号配置</title>
      <link href="posts/e238cc11.html"/>
      <url>posts/e238cc11.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>​        在同一台电脑上有时候需要使用多个GitHub、gitee、gitlab账号，或者说你有多个账号，不想来回生成公钥，那么这就需要使用到git配置多账户了。</p><h2 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h2><p>环境：window 10、git        </p><p>在使用之前你需要安装git，对于git安装也是点击下一步下一步就可以安装完成，在此也需要对git命令有一定的了解。</p><p>前提条件：需要C:\Users\nxg.ssh目录（文件夹）下，打开git bash</p><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107052.png" alt="image-20221031222311849"></p><p>打开之后使用这个界面：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107053.png" alt="image-20221031222421017"></p><p><strong>注意：</strong>这路径C:\Users\nxg.ssh对于有一定基础的根据上图是能看明白，就不再赘述了。</p><p>​        为什么先执行这一步呢？原因是这样的在你创建config文件，生成密钥时都需要创建在这个**.ssh**目录（文件夹）下。如果你在其他目录下打开，那你就需要考虑创建文件时的路径问题了。为了方便明了，就使用上述方法操作，省时省力。</p><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><h3 id="3-1-创建config文件"><a href="#3-1-创建config文件" class="headerlink" title="3.1 创建config文件"></a>3.1 创建config文件</h3><p>在C:\Users\nxg.ssh目录（文件夹）下创建config文件，并且配置ssh key的路由策略。</p><p>创建config文件：</p><pre class="line-numbers language-none"><code class="language-none">touch config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在config文件中配置</p><pre class="line-numbers language-none"><code class="language-none"># GitHubHost github.com    HostName github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa    User git    # Github2Host github2    HostName github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa_github2    User git    # giteeHost gitee.com #自己的码云地址    HostName gitee.com      PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa_gitee    User git    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107054.png" alt="image-20221031224144979"></p><blockquote><p>“#”  表示注释<br>Host  后面是名称，可以随便写，相当于起了一个别名</p><p>每一个Host就代表一个仓库，仓库参数另起一行，前有4个空格<br>HostName ： 真正连接的服务器地址</p><p>ssh的host，SSH地址“git@”后面到冒号前面的内容</p><p><code>User</code>：自定义的用户名，一般使用“git”<br><code>PreferredAuthentications</code>： 指定优先使用哪种方式验证，支持密码和秘钥验证方式 。使用“publickey”即可，git仓库均为这种形式</p><p>权限认证–可设为publickey,password publickey,keyboard-interactive等<br><code>IdentityFile</code>：指定本次连接使用的密钥文件。 该host后台配置的公钥对应的私钥地址的绝对路径<br>Port ： SSH默认端口号为22，某些私有部署的git仓库会更换端口号</p></blockquote><h3 id="3-2-全局配置"><a href="#3-2-全局配置" class="headerlink" title="3.2 全局配置"></a>3.2 全局配置</h3><p>以github为例：</p><pre class="line-numbers language-none"><code class="language-none"># global全局配置,这里使用全局配置# 设置用户名：git config --global user.name 'abc'  # 设置邮箱：git config --global user.email  "123456@qq.com"#秘钥添加到本地，即生成密钥ssh-keygen -t rsa -C "123456@qq.com"# 同理gitee账号也是这么操作的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：这里的abc是GitHub<strong>用户名</strong> ，<strong><a href="mailto:123456@qq.com">123456@qq.com</a></strong>这里是你绑定GitHub上的邮箱</p><p>如下图效果：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107055.png" alt="image-20221031232651471"></p><p>配置gitee效果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107056.png" alt="image-20221031232222217"></p><p>注意：生成密钥文件需要与这里保持一致</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107057.png" alt="image-20221031233525370"></p><h3 id="测试是否连接成功"><a href="#测试是否连接成功" class="headerlink" title="测试是否连接成功"></a>测试是否连接成功</h3><p>测试GitHub是否连接成功：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功效果：</p><pre class="line-numbers language-none"><code class="language-none">Hi abc! You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试Gitee是否连接成功：</p><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功效果：</p><pre class="line-numbers language-none"><code class="language-none">Hi nxg! You've successfully authenticated, but GITEE.COM does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意事项：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107058.png" alt="image-20221031234333269"></p><h2 id="四、关联github"><a href="#四、关联github" class="headerlink" title="四、关联github"></a>四、关联github</h2><p>将id_rsa_gitee.pub文件中的内容添加到gitee设置中的SSH公钥中。</p><p>将id_rsa_github2.pub文件中的内容添加到github的settings的SSH and GPG keys的SSH公钥中。</p><p>注：上面的文件都在</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107059.png" alt="image-20221101162514113"></p><p>效果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107060.png" alt="image-20221101162133360"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在配置多个账号的，方式有多种，可以使用直接修改文件的方式，也可以使用命令的方式</p><p>这里使用修改文件的方式</p><p>首先需要在这C:\Users\nxg路径下，找到**.gitconfig**文件，并打开此文件</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107061.png" alt="image-20221031235250843"></p><p>注意：别直接双击打开，需要选择打开方式，选文本打开，或者其他编辑工具打开。</p><p><strong>.gitconfig</strong>文件内容：</p><pre class="line-numbers language-none"><code class="language-none">[user]name = xiaoliemail = 121212@qq.com[core]autocrlf = true[http]sslVerify = false[user]name = abcemail = 123456@qq.com[core]autocrlf = true[http]sslVerify = false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107063.png" alt="image-20221031235759564"></p><h3 id="查看账号列表："><a href="#查看账号列表：" class="headerlink" title="查看账号列表："></a>查看账号列表：</h3><pre class="line-numbers language-none"><code class="language-none">git config --global --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107064.png" alt="image-20221101000219730"></p><h3 id="添加密钥的方式"><a href="#添加密钥的方式" class="headerlink" title="添加密钥的方式"></a>添加密钥的方式</h3><p>方式一：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "123456@qq.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再执行 <strong>id_rsa</strong></p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107055.png" alt="image-20221031232651471"></p><p>方式二：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "2011465907@qq.com" -f ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120107065.png" alt="image-20221101000544601"></p><blockquote><p><strong>ssh-keygen常用参数说明:</strong></p><p>-t: 密钥类型, 可以选择 dsa | ecdsa | ed25519 | rsa;</p><p>-f: 密钥目录位置, 默认为当前用户home路径下的.ssh隐藏目录, 也就是~/.ssh/, 同时默认密钥文件名以id_rsa开头. 如果是root用户, 则在/root/.ssh/id_rsa, 若为其他用户, 则在/home/username/.ssh/id_rsa;</p><p>-C: 指定此密钥的备注信息, 需要配置多个免密登录时, 建议携带;</p><p>-N: 指定此密钥对的密码, 如果指定此参数, 则命令执行过程中就不会出现交互确认密码的信息了.</p><p>举例说明: 同时指定目录位置、密码、注释信息, 就不需要输入回车键即可完成创建:</p></blockquote><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://blog.csdn.net/weixin_45586870/article/details/120446094">git单一账号使用教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交本地代码至分支（详细每一步）</title>
      <link href="posts/de0da321.html"/>
      <url>posts/de0da321.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h1><p>A: 查看本地分支<br>使用 git branch命令，如下：git branch<br>*标识的是你当前所在的分支</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120106004.png" alt="img"></p><p>B: 查看远程分支</p><p>命令如下：git branch -r</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120106006.png" alt="img"></p><p>C: 查看所有分支</p><p>命令如下：git branch -a</p><p><img src="https://cdn.jsdelivr.net/gh/imnxg/imgbeds@main/posts/202303120106007.png" alt="img"></p><p>二、本地创建新分支</p><p>命令如下：git branch [分支名称]</p><p>例如：git branch plateformSuperdog</p><p>三、切换到新分支</p><p>命令如下：git checkout [分支名称]</p><p>例如：git checkout plateformSuperdog</p><p>四、创建+切换分支</p><p>命令如下：git checkout -b [分支名称]</p><p>例如：git checkout -b plateform2</p><p>其中：git checkout -b [分支名称]相当于两步</p><p>git branch [分支名称]</p><p>git checkout [分支名称]</p><p>五、将新分支推送到github</p><p>命令如下：git push origin [分支名称]</p><p>六：删除本地分支</p><p>命令如下：git branch -d [分支名称]</p><p>七、删除github 远方分支</p><p>命令如下：git push origin :[branch name]</p><p>其中：分支前面：代表删除</p><p>例如：git push origin : plateform2</p><p>八：git 提交本地代码至新分支</p><p>1.切换到新分支</p><p>命令如下：git checkout [分支名称]</p><p>例如：git checkout plateform2</p><p>2.添加本地需要提交的代码</p><p>命令如下：git add .</p><p>3.提交本地代码</p><p>命令如下：git commit -m “修改说明”</p><p>4.push到git仓库</p><p>命令如下：git push origin [分支名称]</p><p>例如：git push origin plateform2 </p><hr><h1 id="简单总结一下："><a href="#简单总结一下：" class="headerlink" title="简单总结一下："></a>简单总结一下：</h1><ol><li>拉取仓库（克隆）：</li></ol><pre class="line-numbers language-none"><code class="language-none">git clone [ssh仓库地址]//cd 进入仓库cd 文件夹名（克隆的文件夹）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>将要提交的代码复制到该仓库中（克隆的文件夹中）</li></ol><pre class="line-numbers language-none"><code class="language-none">//创建分支git branch 分支名称//提交分支到远程仓库git push origin 分支名//切换想要切换的分支，git checkout 分支名//提交代码到想要提交的分支上git add ./git commit -m "提交了代码"git push//或者git push origin 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这也是需要绑定github账号</p><h1 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h1><p><a href="https://blog.csdn.net/chenyao1994/article/details/114686758">https://blog.csdn.net/chenyao1994/article/details/114686758</a></p><p>git合并分支（一看就懂）</p><p>假如我们现在在dev分支上，刚开发完项目，执行了下列命令：</p><pre class="line-numbers language-none"><code class="language-none">git  add .git  commit -m '提交的备注信息'git  push -u origin dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>想将dev分支合并到master分支，操作如下：</p><p>1、首先切换到master分支上</p><pre class="line-numbers language-none"><code class="language-none">git  checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、如果是多人开发的话 需要把远程master上的代码pull下来</p><pre class="line-numbers language-none"><code class="language-none">git pull origin master//如果是自己一个开发就没有必要了，为了保险期间还是pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、然后我们把dev分支的代码合并到master上</p><pre class="line-numbers language-none"><code class="language-none">git  merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、然后查看状态及执行提交命令</p><pre class="line-numbers language-none"><code class="language-none">git statusOn branch masterYour branch is ahead of 'origin/master' by 12 commits.  (use "git push" to publish your local commits)nothing to commit, working tree clean//上面的意思就是你有12个commit，需要push到远程master上 &gt; 最后执行下面提交命令git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、其他命令</p><pre class="line-numbers language-none"><code class="language-none">更新远程分支列表git remote update origin --prune查看所有分支git branch -a删除远程分支Chapater6git push origin --delete Chapater6删除本地分支 Chapater6git branch -d  Chapater6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><h2 id="GIT开发学习——合并分支的几种方法"><a href="#GIT开发学习——合并分支的几种方法" class="headerlink" title="\GIT开发学习——合并分支的几种方法**"></a><strong><em>\</em>GIT开发学习——合并分支的几种方法**</strong></h2><p><a href="https://blog.csdn.net/fenglolo/article/details/125223433">https://blog.csdn.net/fenglolo/article/details/125223433</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="posts/3274106043.html"/>
      <url>posts/3274106043.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript负责页面中的的行为。</p><p>它是一门运行在浏览器端的脚本语言。</p><h2 id="JS的编写的位置"><a href="#JS的编写的位置" class="headerlink" title="JS的编写的位置"></a>JS的编写的位置</h2><p>1.可以编写到标签的指定属性中</p><pre class="line-numbers language-none"><code class="language-none">&lt;button onclick="alert('hello');"&gt;我是按钮&lt;/button&gt;  &lt;a href="javascript:alert('aaa');"&gt;超链接&lt;/a&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.可以编写到script标签中</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript"&gt;  //编写js代码  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.可以将代码编写到外部的js文件中，然后通过标签将其引入</p><p>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略 ,如果需要则可以在创建一个新的script标签用于编写内部代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript" src="文件路径"&gt;&lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><pre class="line-numbers language-none"><code class="language-none">alert("要输出的内容");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句会在浏览器窗口中弹出一个警告框</p><pre class="line-numbers language-none"><code class="language-none">document.write("要输出的内容");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该内容将会被写到body标签中，并在页面中显示</p><pre class="line-numbers language-none"><code class="language-none">console.log("要输出的内容");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该内容会被写到开发者工具的控制台中</p><h2 id="基本的语法"><a href="#基本的语法" class="headerlink" title="基本的语法"></a>基本的语法</h2><p>js函数声明不需要；分号，但是赋值语句要加；分号</p><pre class="line-numbers language-none"><code class="language-none">function functionName(arg0,arg1,arg2){  //函数声明  }  var functionName=function(arg0,arg1,arg2){  //函数表达式  };(注意分号)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释</p><p>单行注释</p><pre class="line-numbers language-none"><code class="language-none">//注释内容  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释</p><pre class="line-numbers language-none"><code class="language-none">/*  注释内容  */  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JS严格区分大小写</p><p>JS中每条语句以分号(;)结尾如果不写分号，浏览器会自动添加，但是会消耗一些系统资源， 而且有些时候，浏览器会加错分号，所以在开发中分号必须写</p><p>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。</p><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量实际上就是一些固定的值，比如 1 2 3 4  true  false  null  NaN  “hello”<br><strong>字面量都是不可以改变的。</strong></p><p>由于字面量不是很方便使用，所以在JS中很少直接使用字面量</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量可以用来保存字面量，并且可以保存任意的字面量</p><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述</p><p>声明变量</p><p>使用var关键字来声明一个变量</p><pre class="line-numbers language-none"><code class="language-none">var a;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为变量赋值</p><pre class="line-numbers language-none"><code class="language-none">a = 1; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>声明和赋值同时进行</p><pre class="line-numbers language-none"><code class="language-none">var a = 456;   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在JS中所有的可以自主命名的内容，都可以认为是一个标识符，<br>是标识符就应该遵守标识符的规范。</p><p>比如：变量名、函数名、属性名</p><p>规范：<br>1.标识符中可以含有字母、数字、_、$<br>2.标识符不能以数字开头<br>3.标识符不能是JS中的关键字和保留字<br>4.标识符一般采用驼峰命名法<br>xxxYyyZzz</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>数据类型指的就是字面量的类型</p><h2 id="六种数据类型"><a href="#六种数据类型" class="headerlink" title="六种数据类型"></a>六种数据类型</h2><p><strong>JS中一共分成六种数据类型 5种基本数据类型+object</strong><br>String  字符串<br>Number  数值<br>Boolean  布尔值<br>Null  空值<br>Undefined  未定义<br>Object  对象</p><p>其中string、number、Boolean、null、undefined为5种基本数据类型，而object属于引用数据类型</p><p><strong>typeof运算符检查数据类型</strong></p><p>可以使用一个运算符typeof来检查一个变量的类型</p><p>语法：typeof  变量</p><p>检查字符串时，会返回string</p><p>检查数值时会返回number</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面是详细说明各数据类型</p><h3 id="1-String-字符串"><a href="#1-String-字符串" class="headerlink" title="1.String 字符串"></a>1.String 字符串</h3><p>JS中的字符串需要使用引号引起来，双引号或单引号都行<br>在字符串中转义字符的使用</p><pre class="line-numbers language-none"><code class="language-none">\   ==&gt; 转义字符\'  ==&gt; '  \"  ==&gt; "  \n  ==&gt; 换行  \t  ==&gt; 制表符  \\  ==&gt; \  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用typeof运算符检查字符串时，会返回”string”</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-Number-数值"><a href="#2-Number-数值" class="headerlink" title="2.Number 数值"></a>2.Number 数值</h3><p><strong>JS中所有的整数和浮点数（小数）都是Number类型</strong></p><p>数字的最大能表示的值：Number.MAX_VALUE= 1.7976931348623157e+308</p><p>数字的最大能表示的值：Number.MIN_VALUE=5e-324</p><p>注：1.2e+308是科学计数法表示1.2乘以10的308次方</p><p>如果使用Number表示的数值超过了最大值，则会返回一个Infinity</p><p> Infinity是字面量</p><p>特殊的数字：能赋值给变量</p><p>Infinity  正无穷    a = Infinity ,能赋值<br>-Infinity  负无穷<br>NaN 非法数字（Not A Number）——–是一个 特殊的数字<br>其他进制的数字的表示：<br>0b 开头表示二进制，但是不是所有的浏览器都支持<br>0 开头表示八进制<br>0x 开头表示十六进制</p><p>使用typeof检查一个Number类型的数据时，会返回”number”<br>（包括NaN 和 Infinity）</p><h3 id="3-Boolean-布尔值"><a href="#3-Boolean-布尔值" class="headerlink" title="3.Boolean 布尔值"></a>3.Boolean 布尔值</h3><p>布尔值主要用来进行逻辑判断，布尔值只有两个<br>true 逻辑的真<br>false 逻辑的假<br>使用typeof检查一个布尔值时，会返回”boolean”</p><h3 id="4-Null-空值"><a href="#4-Null-空值" class="headerlink" title="4.Null 空值"></a>4.Null 空值</h3><p>空值专门用来表示为<strong>空的对象</strong>，Null类型的值只有一个<br>null<br>使用typeof检查一个Null类型的值时会返回”object”</p><h3 id="5-Undefined-未定义"><a href="#5-Undefined-未定义" class="headerlink" title="5.Undefined 未定义"></a>5.Undefined 未定义</h3><p><strong>如果声明一个变量，但是并不给变量赋值，此时变量的值就是undefined</strong><br>该类型的值只有一个 undefined<br>使用typeof检查一个Undefined类型的值时，会返回”undefined”</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>Object 对象</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类型转换主要指，将其他的数据类型转换为string、number、Boolean</p><p>类型转换就是指将其他的数据类型，转换为String Number 或 Boolean</p><h3 id="转换为String"><a href="#转换为String" class="headerlink" title="转换为String"></a>转换为String</h3><p>强制 类型转换指将一个数据类型强制转换为其他·的数据类型</p><h4 id="方式一（强制类型转换）："><a href="#方式一（强制类型转换）：" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p><strong>调用被转换数据的toString()方法</strong></p><p>调用xxx的yyy()方法，就是xxx.yyy()</p><p>eg：</p><pre class="line-numbers language-none"><code class="language-none">var a = 123;a = a.toString(); //调用a的toString()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该方法不会影响到原变量，它会将转换的结果返回</p><p>但注意：<code>**这个方法不适用于null和undefined**</code><br><code>由于这两个类型的数据中没有方法，所以调用toString()时会报错</code></p><p>eg</p><pre class="line-numbers language-none"><code class="language-none">var a=233;a = a.toString();a = null;//a = a.toString(); //会报错a = undefine;//a = a.toString(); //会报错console.log(typeof a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式二（强制类型转换）："><a href="#方式二（强制类型转换）：" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h4><p><strong>调用String()函数</strong></p><p>调用String()函数，并将被转换的数据作为参数传递给函数</p><p>使用String()函数做强制转换时，对于Number·和·Boolean实际上就是调用toString()方法</p><p>但是对于null和undefined，就不会调用toString()方法</p><p>​                它会将null 直接转换为 “null”</p><p>​                将会undefined 直接转换为“undefined”</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = 123;  a = String(a);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：<strong>对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”</strong></p><h4 id="方式三（隐式的类型转换）"><a href="#方式三（隐式的类型转换）" class="headerlink" title="方式三（隐式的类型转换）:"></a>方式三（隐式的类型转换）:</h4><p><strong>为任意的数据类型 +””</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = true;  a = a + ""; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：和String()函数一样</p><h3 id="转换为Number"><a href="#转换为Number" class="headerlink" title="转换为Number"></a>转换为Number</h3><h4 id="方式一（强制类型转换）：-1"><a href="#方式一（强制类型转换）：-1" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p><strong>调用Number()函数</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var s = "123";  s = Number(s); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换的情况：</p><ol><li>字符串  –&gt;  数字<br>如果字符串是一个合法的数字(纯数字），则直接转换为对应的数字<br>如果字符串是一个非法的数字（非数字的内容），则转换为NaN<br>如果是一个空串或纯空格的字符串（全是空格的字符），则转换为0</li><li>布尔值  –&gt;  数字<br>true转换为1<br>false转换为0</li><li>空值  –&gt;  数字<br>null转换为0</li><li>未定义 &gt; 数字<br>undefined 转换为NaN</li></ol><h4 id="方式二（强制类型转换）：-1"><a href="#方式二（强制类型转换）：-1" class="headerlink" title="方式二（强制类型转换）："></a>方式二（强制类型转换）：</h4><p>调用parseInt()或parseFloat()<br>这两个函数<strong>专门</strong>用来将一个<strong>字符串转换为数字</strong>的</p><p>如果对非String使用parseInt()或parseFloat()，它会<strong>先将其转换为String</strong>然后在操作 parseInt()<br>可以将<strong>一个字符串中的有效的整数位</strong>提取出来，并转换为Number<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">//parse为解析，int为整型//调用parseInt()函数将a转换为Numbervar a = "123.456px";  a = parseInt(a); //123  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要可以在parseInt()中指定一个第二个参数，来指定进制parseFloat()可以将一个<strong>字符串中的有效的小数位</strong>提取出来，并转换为Number<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">//parseFloat()作用和parseInt()类似，不同的是它可以获得有效的小数var a = "123.456px";  a = parseFloat(a); //123.456  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果对非String使用parseInt()或parseFloat(),它会先将其转换为String，然后再操作</p><p>eg：</p><pre class="line-numbers language-none"><code class="language-none">a = true;a = parseInt(a);console.log(typeof a);//检查类型就字符串console.log(a);//输出的是NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式三（隐式的类型转换）："><a href="#方式三（隐式的类型转换）：" class="headerlink" title="方式三（隐式的类型转换）："></a>方式三（隐式的类型转换）：</h4><p>使用一元的+来进行隐式的类型转换<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = "123";  a = +a;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>原理：和Number()函数一样</strong></p><h3 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字"></a>其他进制的数字</h3><p>在js中，如果需要表示16进制的数字，则需要以0x开头</p><p>​                如果需要表示8进制的数字，则需要以0开头</p><p>​                如果需要表示2进制的数字，则需要以0b开头</p><p>​                                    但是不是所有的浏览器都支持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token comment">//十六进制</span>a <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0xCafe</span><span class="token punctuation">;</span><span class="token comment">//八进制</span>a <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span><span class="token comment">//二进制</span><span class="token comment">// a = 0b10;</span><span class="token comment">//像“070“这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析</span>a <span class="token operator">=</span> <span class="token string">"070"</span><span class="token punctuation">;</span><span class="token comment">//可以在parseInt()中传递一个第二个参数，来指定数字的进制</span><span class="token comment">//parseInt(参数，指定进制)</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><h4 id="方式一（强制类型转换）：-2"><a href="#方式一（强制类型转换）：-2" class="headerlink" title="方式一（强制类型转换）："></a>方式一（强制类型转换）：</h4><p>使用Boolean()函数<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var s = "false";  s = Boolean(s); //true <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换的情况<br>字符串 —&gt; 布尔<br>除了空串其余全是true</p><p>数值 —&gt; 布尔<br>除了0和NaN其余的全是true</p><p>null、undefined —&gt; 布尔<br>都是false</p><p>对象 —&gt; 布尔<br>都是true</p><h4 id="方式二（隐式类型转换）："><a href="#方式二（隐式类型转换）：" class="headerlink" title="方式二（隐式类型转换）："></a>方式二（隐式类型转换）：</h4><p><strong>为任意的数据类型做两次非运算，即可将其转换为布尔值</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = "hello";  a = !!a; //true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符也称为操作符<br>通过运算符可以对一个或多个值进行运算或操作</p><h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><p>用来检查（获取）一个变量的数据类型<br>语法：typeof 变量<br>它会返回一个用于描述类型的字符串作为结果</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+ 对两个值进行加法运算并返回结果<br>- 对两个值进行减法运算并返回结果<br>* 对两个值进行乘法运算并返回结果<br>/ 对两个值进行除法运算并返回结果<br>% 对两个值进行取余运算并返回结果</p><p><strong>除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。</strong><br>而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。<br>任何值和字符串做加法，都会先转换为字符串，然后再拼串</p><pre class="line-numbers language-none"><code class="language-none">var result = 123;result = 1+2+"3;//33result = "1"+2+3;//123rsult = 1+"12";//会先转换为字符串，然后再拼串console.log(result);//返回的值为112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>一元运算符只需要一个操作数</p><h4 id="一元的"><a href="#一元的" class="headerlink" title="一元的+"></a>一元的+</h4><p>就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = true;  a = +a;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="一元的-1"><a href="#一元的-1" class="headerlink" title="一元的-"></a>一元的-</h4><p>就是负号，可以对一个数字进行符号位取反<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var a = 10;  a = a;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><p>自增可以使变量在原值的基础上自增1<br>自增使用 ++<br>自增可以使用 前++（++a）后++(a++)<br>无论是++a 还是 a++都会立即使原变量自增1<br>不同的是++a 和 a++的值是不同的，<br>++a的值是变量的新值（自增后的值）<br>a++的值是变量的原值（自增前的值）</p><pre class="line-numbers language-none"><code class="language-none">var d = 10;//第一次d++，是在10的基础上自增console.log(d++);//11//第二次d++，是在11的基础上自增d++;//10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h4><p>自减可以使变量在原值的基础上自减1<br>自减使用  –<br>自减可以使用 前–（–a）后–(a–)<br>无论是–a 还是 a– 都会立即使原变量自减1<br>不同的是–a- 和 a–的值是不同的，<br>–a的值是变量的新值（自减后的值）<br>a–的值是变量的原值（自减前的值）</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>!<br>非运算可以对一个布尔值进行取反，true变false false边true<br>当对非布尔值使用!时，会先将其转换为布尔值然后再取反<br>我们可以利用!来将其他的数据类型转换为布尔值</p><p>&amp;&amp;<br>&amp;&amp;可以对符号两侧的值进行与运算<br>只有两端的值都为true时，才会返回true。只要有一个false就会返回false。<br>与是一个短路的与，如果第一个值是false，则不再检查第二个值<br>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>规则：<br>1.如果第一个值为false，则返回第一个值<br>2.如果第一个值为true，则返回第二个值</p><p>||<br>||可以对符号两侧的值进行或运算<br>只有两端都是false时，才会返回false。只要有一个true，就会返回true。<br>或是一个短路的或，如果第一个值是true，则不再检查第二个值<br>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>规则：<br>1.如果第一个值为true，则返回第一个值<br>2.如果第一个值为false，则返回第二个值</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=<br>可以将符号右侧的值赋值给左侧变量<br>+=</p><pre class="line-numbers language-none"><code class="language-none">a += 5 相当于 a = a+5    var str = "hello";  str += "world";  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-=</p><pre class="line-numbers language-none"><code class="language-none">a -= 5  相当于 a = a-5  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*=</p><pre class="line-numbers language-none"><code class="language-none">a *= 5 相当于 a = a*5  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>/=</p><pre class="line-numbers language-none"><code class="language-none">a /= 5 相当于 a = a/5  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>%=</p><pre class="line-numbers language-none"><code class="language-none">a %= 5 相当于 a = a%5 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符用来比较两个值之间的大小关系的<br>&gt;<br>&gt;=<br>&lt;<br>&lt;=<br>关系运算符的规则和数学中一致，用来比较两个值之间的关系，<br>如果关系成立则返回true，关系不成立则返回false。<br>如果比较的两个值是非数值，会将其转换为Number然后再比较。<br>如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。</p><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h3><p>相等，判断左右两个值是否相等，如果相等返回true，如果不等返回false<br>相等会自动对两个值进行类型转换，如果<strong>对不同的类型进行比较，会将其转换为相同的类型然后再比较</strong>，转换后相等它也会返回true，null == undifined</p><p>!=<br>不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false<br>不等也会做自动的类型转换。</p><p><strong>===</strong><br><strong>全等</strong>，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，<br>如果两个值的类型不同，则直接返回false</p><p>!==<br><strong>不全等</strong>，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true</p><p>特殊的值：<br>null和undefined<br>由于undefined衍生自null，所以<strong>null == undefined</strong> 会返回true。<br>但是 null === undefined 会返回false。<br><strong>NaN</strong><br>NaN不与任何值相等，报告它自身 NaN == NaN //false</p><p>判断一个值是否是NaN<br>使用isNaN()函数</p><h3 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h3><p>?:<br>语法：条件表达式?语句1:语句2;<br>执行流程：<br>先对条件表达式求值判断，<br>如果判断结果为true，则执行语句1，并返回执行结果<br>如果判断结果为false，则执行语句2，并返回执行结果</p><p>优先级：<br>和数学中一样，JS中的运算符也是具有优先级的，<br>比如 先乘除 后加减 先与 后或<br>具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，<br>优先级越高的越优先计算，优先级相同的，从左往右计算。<br>优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。</p><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>程序都是自上向下的顺序执行的，<br>通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。</p><h3 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h3><p>条件判断语句也称为if语句<br>语法一：</p><pre class="line-numbers language-none"><code class="language-none">if(条件表达式){  语句...  }   执行流程：   if语句执行时，会先对条件表达式进行求值判断，   如果值为true，则执行if后的语句   如果值为false，则不执行  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法二：</p><pre class="line-numbers language-none"><code class="language-none">if(条件表达式){  语句...  }else{  语句...  }  执行流程：  if...else语句执行时，会对条件表达式进行求值判断，  如果值为true，则执行if后的语句  如果值为false，则执行else后的语句  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法三：</p><pre class="line-numbers language-none"><code class="language-none">if(条件表达式){  语句...  }else if(条件表达式){  语句...  }else if(条件表达式){  语句...  }else if(条件表达式){  语句...  }else{  语句...  }   执行流程   if...else if...else语句执行时，会自上至下依次对条件表达式进行求值判断，  如果判断结果为true，则执行当前if后的语句，执行完成后语句结束。  如果判断结果为false，则继续向下判断，直到找到为true的为止。  如果所有的条件表达式都是false，则执行else后的语句  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.条件分支语句<br>switch语句<br>语法:</p><pre class="line-numbers language-none"><code class="language-none">switch(条件表达式){  case 表达式:  语句...  break;  case 表达式:  语句...  break;  case 表达式:  语句...  break;  default:  语句...  break;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行流程：<br>switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，<br>如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。<br>如果所有的case判断结果都为false，则从default处开始执行代码。</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>通过循环语句可以反复执行某些语句多次<br>while循环<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">while(条件表达式){      语句...  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程：<br>while语句在执行时，会先对条件表达式进行求值判断，<br>如果判断结果为false，则终止循环<br>如果判断结果为true，则执行循环体<br>循环体执行完毕，继续对条件表达式进行求值判断，依此类推</p><p>do…while循环<br>语法:</p><pre class="line-numbers language-none"><code class="language-none">do{  语句...  }while(条件表达式)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程<br>do…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，<br>如果判断判断结果为false，则终止循环。<br>如果判断结果为true，则继续执行循环体，依此类推</p><p>和while的区别：<br>while：先判断后执行<br>do…while: 先执行后判断<br>do…while可以确保循环体至少执行一次。</p><p>for循环<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">for(①初始化表达式 ; ②条件表达式 ; ④更新表达式){      ③语句...  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程：<br>首先执行①初始化表达式，初始化一个变量，<br>然后对②条件表达式进行求值判断，如果为false则终止循环<br>如果判断结果为true，则执行③循环体<br>循环体执行完毕，执行④更新表达式，对变量进行更新。<br>更新表达式执行完毕重复②</p><p>死循环</p><pre class="line-numbers language-none"><code class="language-none">while(true){  }  for(;;){  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h1><p>对象是JS中的引用数据类型<br><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong><br>使用typeof检查一个对象时，会返回object</p><h2 id="对象的分类："><a href="#对象的分类：" class="headerlink" title="对象的分类："></a>对象的分类：</h2><p>1.内建对象<br>- 由ES标准中定义的对象，在任何的ES的实现中都可以使用<br>- 比如：Math String Number Boolean Function Object….</p><p>2.宿主对象<br>- 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象<br>- 比如 BOM DOM</p><p>3.自定义对象</p><pre class="line-numbers language-none"><code class="language-none">- 由开发人员自己创建的对象  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建对象<br>方式一：</p><pre class="line-numbers language-none"><code class="language-none">var obj = new Object();  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式二：</p><pre class="line-numbers language-none"><code class="language-none">var obj = {}; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>向对象中添加属性</strong><br>语法：<br>对象.属性名 = 属性值;<br><strong>对象[“属性名”] = 属性值;</strong> //这种方式能够使用特殊的属性名</p><p><strong>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</strong><br>属性值也可以任意的数据类型。</p><p>读取对象中的属性<br>语法：<br>对象.属性名<br>对象[“属性名”] //“属性名”可以使字符串常量，也可以是字符串变量<br>如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined</p><p><strong>删除对象中的属性</strong><br>语法：</p><pre class="line-numbers language-none"><code class="language-none">delete 对象.属性名  delete 对象["属性名"]  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p><strong>使用in检查对象中是否含有指定属性</strong><br>语法：”属性名” in 对象<br>如果在对象中含有该属性，则返回true<br>如果没有则返回false</p><pre class="line-numbers language-none"><code class="language-none">  循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).  var obj = {'0':'a','1':'b','2':'c'};    for(var i in obj) {       console.log(i,":",obj[i]);  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用对象字面量，在创建对象时直接向对象中添加属性</strong><br>语法：</p><pre class="line-numbers language-none"><code class="language-none">var obj = {      属性名:属性值,      属性名:属性值,      属性名:属性值,      属性名:属性值  } <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本数据类型和引用数据类型<br>基本数据类型<br>String Number Boolean Null Undefined<br>引用数据类型<br>Object<br><strong>基本数据类型的数据，变量是直接保存的它的值。</strong><br>变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。<br><strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong><br>如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br>比较两个变量时，对于基本数据类型，比较的就是值，<br>对于引用数据类型比较的是地址，地址相同才相同</p><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）</strong><br>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码<br>使用typeof检查一个函数时会返回function<br>创建函数<br>函数声明</p><pre class="line-numbers language-none"><code class="language-none">function 函数名([形参1,形参2...形参N]){  语句...  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数表达式</p><pre class="line-numbers language-none"><code class="language-none">var 函数名 = function([形参1,形参2...形参N]){  语句...  };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用函数<br>语法：函数对象([实参1,实参2…实参N]);<br>fun() sum() alert() Number() parseInt()<br>当我们调用函数时，函数中封装的代码会按照编写的顺序执行</p><p><strong>立即执行函数</strong><br>函数定义完，立即被调用，这种函数叫做立即执行函数<br>立即执行函数往往只会执行一次</p><pre class="line-numbers language-none"><code class="language-none">(function(a,b){      console.log("a = "+a);      console.log("b = "+b);  })(123,456); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>遍历对象</p><pre class="line-numbers language-none"><code class="language-none">for(var v in obj){      document.write("property：name ="+v+"value="+obj[v]+"&lt;br/&gt;" );  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>形参和实参<br>形参：形式参数<br>定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开<br>定义形参就相当于在函数内声明了对应的变量但是并不赋值，<br>形参会在调用时才赋值。</p><p>实参：实际参数<br>调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,<br>调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。<br><strong>如果实参的数量大于形参，多余实参将不会赋值，</strong><br><strong>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</strong></p><p><strong>返回值，就是函数执行的结果。</strong><br>使用return 来设置函数的返回值。<br>语法：return 值;<br>该值就会成为函数的返回值，可以通过一个变量来接收返回值<br>return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。<br>return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。<br><strong>如果return后不跟值，或者是不写return则函数默认返回undefined。</strong><br>break、continue和return<br>break<br>退出循环<br>continue<br>跳过当次循环<br>return<br>退出函数</p><p><strong>参数，函数的实参也可以是任意的数据类型。</strong></p><p><strong>方法（method）</strong><br>可以将一个函数设置为一个对象的属性，<br>当一个对象的属性是一个函数时，<br>我们称这个函数是该对象的方法。<br>对象.方法名();<br>函数名()</p><h3 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h3><p>call()<br>apply()<br><strong>这两个方法都是函数对象的方法需要通过函数对象来调用</strong><br>通过两个方法可以直接调用函数，并且<strong>可以通过第一个实参来指定函数中this</strong><br>不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<br><strong>arguments</strong><br>arguments和this类似，都是函数中的隐含的参数<br>arguments是一个类数组元素，它用来封装函数执行过程中的实参<br>所以即使不定义形参，也可以通过arguments来使用实参<br><strong>arguments中有一个属性callee表示当前执行的函数对象</strong></p><p>this（调用函数的那个对象）<br>this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this是调用方法的对象<br>3.以构造函数的形式调用时，this是新建的那个对象<br>4.使用call和apply调用时，this是指定的那个对象<br>5.在全局作用域中this代表window</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域简单来说就是一个变量的作用范围。<br>在JS中作用域分成两种：</p><p>1.全局作用域</p><p>直接在script标签中编写的代码都运行在全局作用域中<br><strong>全局作用域在打开页面时创建，在页面关闭时销毁。</strong><br>全局作用域中有一个全局对象window，window对象由浏览器提供，<br>可以在页面中直接使用，它代表的是整个的浏览器的窗口。<br><strong>在全局作用域中创建的变量都会作为window对象的属性保存</strong><br>在全局作用域中创建的函数都会作为window对象的方法保存<br>在全局作用域中创建的变量和函数可以在页面的任意位置访问。<br>在函数作用域中也可以访问到全局作用域的变量。<br>尽量不要在全局中创建变量</p><p>2.函数作用域</p><p>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。<br>函数作用域在函数执行时创建，在函数执行结束时销毁。<br>在函数作用域中创建的变量，不能在全局中访问。<br>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，<br>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，<br>如果找到了则使用，找不到则继续向上找，一直会</p><p><strong>变量的声明提前</strong><br>在全局作用域中，使用<strong>var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。</strong><br>所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。<br>在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，<br>如果没有使用var关键字声明变量，则变量会变成全局变量</p><p><strong>函数的声明提前</strong><br>在全局作用域中，使用<strong>函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建</strong>，<br>也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性<br>在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。</p><h2 id="this（上下文对象）"><a href="#this（上下文对象）" class="headerlink" title="this（上下文对象）"></a>this（上下文对象）</h2><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。</p><p>指向当前对象</p><p>this的不同的情况：<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this就是调用方法的对象<br>3.以构造函数的形式调用时，this就是新创建的对象</p><h2 id="4-构造函数"><a href="#4-构造函数" class="headerlink" title="4.构造函数"></a>4.构造函数</h2><p>构造函数是专门用来创建对象的函数<br><strong>一个构造函数我们也可以称为一个类</strong><br>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br>通过同一个构造函数创建的对象，我们称为一类对象<br>构造函数就是一个普通的函数，只是他的调用方式不同，<br>如果直接调用，它就是一个普通函数<br>如果使用new来调用，则它就是一个构造函数</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">function Person(name , age , gender){      this.name = name;      this.age = age;      this.gender = gender;      this.sayName = function(){          alert(this.name);      };  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数的执行流程：<br>1.创建一个新的对象<br>2.将新的对象作为函数的上下文对象（this）<br>3.执行函数中的代码<br>4.将新建的对象返回</p><p><strong>instanceof 用来检查一个对象是否是一个类的实例</strong><br>语法：对象 instanceof 构造函数<br>如果该对象时构造函数的实例，则返回true，否则返回false<br><strong>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</strong></p><p>枚举对象中的属性<br>for…in<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">for(var 属性名 in 对象){    }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，<br>每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性</p><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>创建一个函数以后，<strong>解析器都会默认在函数中添加一个数prototype</strong><br>prototype属性指向的是一个对象，这个对象我们称为原型对象。<br>当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性执行该原型对象。</strong></p><pre class="line-numbers language-none"><code class="language-none">这个隐含的属性可以通过对象.__proto__来访问。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong><br>我们可以将对象中共有的属性和方法统一添加到原型对象中，<br>这样我们只需要添加一次，就可以使所有的对象都可以使用。<br>当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，<br>如果在自身中找到了，则直接使用。<br>如果没有找到，则去原型对象中寻找，如果找到了则使用，<br><strong>如果没有找到，则去原型的原型中寻找，\</strong>依此类推。直到找到Object的原型为止，Object的原型的原型为null，<br>如果依然没有找到则返回undefined<br>**hasOwnProperty()**<br>这个方法可以用来检查**对象自身中**是否含有某个属性<br>语法：对象.hasOwnProperty(“属性名”)</p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</p><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法</p><pre class="line-numbers language-none"><code class="language-none">//修改Person原型的toString  Person.prototype.toString = function(){  return "Person[name="+this.name+",age="+this.age+",gender="+this.gender+"]";  };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾<br>这些垃圾积攒过多以后，会导致程序运行的速度过慢，<br>所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾<br>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，<br>此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，<br>所以这种垃圾必须进行清理。<br>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，<br>我们不需要也不能进行垃圾回收的操作<br>我们需要做的只是要将不再使用的对象设置null即可</p><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组也是一个对象，是一个用来存储数据的对象和Object类似，但是它的存储效率比普通对象要高<br>数组中保存的内容我们称为元素<br>数组使用索引（index）来操作元素<br>索引指由0开始的整数</p><h2 id="数组的操作："><a href="#数组的操作：" class="headerlink" title="数组的操作："></a>数组的操作：</h2><p>创建数组</p><pre class="line-numbers language-none"><code class="language-none">var arr = new Array();  var arr = [];  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向数组中添加元素<br>语法；<br>数组对象[索引] = 值;</p><pre class="line-numbers language-none"><code class="language-none">arr[0] = 123;  arr[1] = "hello";  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建数组时直接添加元素<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">var arr = [元素1,元素2....元素N]; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">var arr = [123,"hello",true,null];  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取和修改数组的长度<br>使用length属性来操作数组的长度<br>获取长度：<br>数组.length<br>length获取到的是数组的最大索引+1<br>对于连续的数组，length获取到的就是数组中元素的个数<br>修改数组的长度<br>数组.length = 新长度<br>如果修改后的length大于原长度，则多出的部分会空出来<br>如果修改后的length小于原长度，则原数组中多出的元素会被删除<br>向数组的最后添加元素<br>数组[数组.length] = 值;</p><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><table><thead><tr><th>functionName</th><th>function</th><th>usage</th></tr></thead><tbody><tr><td>push()</td><td>用来向数组的末尾添加一个或多个元素，并返回数组新的长度</td><td>语法：数组.push(元素1,元素2,元素N)pop()</td></tr><tr><td>pop()</td><td>用来删除数组的最后一个元素，并返回被删除的元素</td><td></td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回数组的新的长度</td><td></td></tr><tr><td>shift()</td><td>删除数组的开头的一个元素，并返回被删除的元素</td><td></td></tr><tr><td>reverse()</td><td>可以用来反转一个数组，它会对原数组产生影响</td><td></td></tr><tr><td>concat()</td><td>可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="slice-sart-end"><a href="#slice-sart-end" class="headerlink" title="slice(sart,[end])"></a>slice(sart,[end])</h3><pre class="line-numbers language-none"><code class="language-none">可以从一个数组中截取指定的元素  该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回  参数：  1.截取开始位置的索引（包括开始位置）  2.截取结束位置的索引（不包括结束位置）   第二个参数可以省略不写，如果不写则一直截取到最后   参数可以传递一个负值，如果是负值，则从后往前数  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><pre class="line-numbers language-none"><code class="language-none">可以用来删除数组中指定元素，并使用新的元素替换  该方法会将删除的元素封装到新数组中返回  参数：  1.删除开始位置的索引  2.删除的个数  3.三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-splitor"><a href="#join-splitor" class="headerlink" title="join([splitor])"></a>join([splitor])</h3><p>可以将一个数组转换为一个字符串<br>参数：<br>需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素<br>如果不指定连接符则默认使用,</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序<br>调用以后，会直接修改原数组。<br>可以自己指定排序的规则，需要一个回调函数作为参数：</p><p>我们可以自己来指定排序的规则<br>我们可以在sort()添加一个回调函数，来指定排序规则，<br>回调函数中需要定义两个形参,<br>浏览器将会分别使用数组中的元素作为实参去调用回调函数<br>使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边</p><ul><li>浏览器会根据回调函数的返回值来决定元素的顺序，<br>如果返回一个大于0的值，则元素会交换位置<br>如果返回一个小于0的值，则元素位置不变<br>如果返回一个0，则认为两个元素相等，也不交换位置</li><li>如果需要升序排列，则返回 a-b<br>如果需要降序排列，则返回b-a</li></ul><pre class="line-numbers language-none"><code class="language-none">function(a,b){  //升序排列  //return a-b;    //降序排列  return b-a;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>遍历数组就是将数组中元素都获取到<br>一般情况我们都是使用for循环来遍历数组</p><pre class="line-numbers language-none"><code class="language-none">for(var i=0 ; i&lt;数组.length ; i++){      //数组[i]  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用forEach()方法来遍历数组（不兼容IE8）</p><pre class="line-numbers language-none"><code class="language-none">数组.forEach(function(value , index , obj){    });  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>forEach()方法需要一个回调函数作为参数，<br>数组中有几个元素，回调函数就会被调用几次，<br>每次调用时，都会将遍历到的信息以实参的形式传递进来，<br>我们可以定义形参来获取这些信息。<br>value:正在遍历的元素<br>index:正在遍历元素的索引<br>obj:被遍历对象</p><h1 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>在JS中为我们提供了<strong>三个包装类：</strong><br>String() Boolean() Number()<br>通过这三个包装类可以创建基本数据类型的对象<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">var num = new Number(2);  var str = new String("hello");  var bool = new Boolean(true); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是在实际应用中千万不要这么干。</p><p>当我们去操作一个基本数据类型的属性和方法时，<br><strong>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</strong><br>操作完成以后再将这个临时对象进行销毁。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>日期的对象，在JS中通过Date对象来表示一个时间<br>创建对象<br>创建一个当前的时间对象</p><pre class="line-numbers language-none"><code class="language-none">var d = new Date();  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个指定的时间对象</p><pre class="line-numbers language-none"><code class="language-none">var d = new Date("月/日/年 时:分:秒");  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><table><thead><tr><th>name</th><th></th></tr></thead><tbody><tr><td>getDate()</td><td>当前日期对象是几日（1-31）</td></tr><tr><td>getDay()</td><td>返回当前日期对象时周几（0-6） 0 周日 1 周一 。。。</td></tr><tr><td>getMonth()</td><td>返回当前日期对象的月份（0-11） 0 一月 1 二月 。。。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getTime()</td><td>返回当前日期对象的时间戳 时间戳，指的是从1970年月1日 0时0分0秒，<strong>到现在时间的毫秒数</strong> 计算机底层保存时间都是以时间戳的形式保存的。</td></tr><tr><td>Date.now()</td><td>可以获取当前代码执行时的时间戳</td></tr></tbody></table><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法<br>我们可以直接使用它来进行数学运算相关的操作<br>方法：<br>Math.PI<br>常量，圆周率<br>Math.abs()<br>绝对值运算<br>Math.ceil()<br>向上取整<br>Math.floor()<br>向下取整<br>Math.round()<br>四舍五入取整<br>Math.random()<br>生成一个01之间的随机数<br>生成一个xy之间的随机数<br>Math.round(Math.random()*(y-x)+x);<br>Math.pow(x,y)<br>求x的y次幂<br>Math.sqrt()<br>对一个数进行开方<br>Math.max()<br>求多个数中最大值<br>Math.min()<br>求多个数中的最小值</p><h2 id="字符串的相关的方法"><a href="#字符串的相关的方法" class="headerlink" title="字符串的相关的方法"></a>字符串的相关的方法</h2><p>使用ES6中的字符串新方法</p><p><strong>String.prototype.padStart(maxLength, fillString=’’)</strong> 或 **String.prototype.padEnd(maxLength, fillString=’’)**来填充字符串；</p><p>length<br>获取字符串的长度<br>charAt()<br>根据索引获取指定的字符<br>charCodeAt()<br>根据索引获取指定的字符编码<br><strong>String.fromCharCode()</strong><br><strong>根据字符编码获取字符</strong><br>indexOf()<br>lastIndexOf()<br>从一个字符串中检索指定内容<br>需要一个字符串作为参数，这个字符串就是要检索的内容，<br>如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br>可以指定一个第二个参数，来表示开始查找的位置<br>indexOf()是从前向后找<br>lastIndexOf()是从后向前找<br>slice(start,[end])<br>可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量<br>参数：<br>第一个：截取开始的位置（包括开始）<br>第二个：截取结束的位置<strong>（不包括结束）</strong><br>可以省略第二个参数，如果省略则一直截取到最后<br>可以传负数，如果是负数则从后往前数<br>substr()<br>和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量</p><p>substring()<br>和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，<br><strong>substring()中如果第二个参数小于第一个，自动调整位置</strong><br>toLowerCase()<br>将字符串转换为小写并返回<br>toUpperCase()<br>将字符串转换为大写并返回</p><h3 id="正则表达相关方法"><a href="#正则表达相关方法" class="headerlink" title="正则表达相关方法"></a>正则表达相关方法</h3><p><strong>split()</strong><br>可以根据指定内容将一个字符串拆分为一个数组<br>参数：<br>需要一个字符串作为参数，将会根据字符串去拆分数组<br>可以接收一个正则表达式，此时会根据正则表达式去拆分数组</p><p><strong>match()</strong><br>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来<br>默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索<br>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容<br>可以为一个正则表达式设置多个匹配模式，且顺序无所谓<br>match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><p><strong>replace()</strong><br>可以将字符串中指定内容替换为新的内容<br>参数：<br>1.被替换的内容，可以接受一个正则表达式作为参数<br><strong>2.新的内容</strong> 空串则为删除””<br>默认只会替换第一个</p><p>search()<br>可以搜索字符串中是否含有指定内容<br>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回1<br>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串<br>serach()只会查找第一个，即使设置全局匹配也没用</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，<br>也可以将一个字符串中符合规则的内容提取出来。<br><strong>创建正则表达式</strong><br>var reg = new RegExp(“正则”,”匹配模式”); 注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，如果要使用\则需要使用\来代替</p><p>var reg = /正则表达式/匹配模式 （匹配模式可以多个一起写：/gi）</p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>匹配模式：<br>i:忽略大小写（ignore）<br>g:全局匹配模式（默认为1次）<br>设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求</p><p>正则语法<br>| 或<br>[] 或<br>[^ ] 除了</p><pre class="line-numbers language-none"><code class="language-none">**[x-y] x的ascii到y的ascii码之间的值**  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[a-z] 小写字母 <strong>（也可以[e-i])</strong><br>[A-Z] 大写字母<br>[A-z] 任意字母,<strong>但是还包括了其他ASCII在此之中的</strong><br>[0-9] 任意数字</p><p>元符号</p><p>检查一个字符串中是否含有 .<br>. 表示任意字符<br>在正则表达式中使用\作为转义字符<br>. 来表示.<br>\ 表示\</p><p>\w<br>任意字母、数字、_ [A-z0-9_]<br>\W<br>除了字母、数字、_ [ ^A-z0-9_]<br>\d<br>任意的数字 [0-9]<br>\D<br>除了数字 [ ^0-9]<br>\s<br>空格<br>\S<br>除了空格<br>\b<br>单词边界<br>\B<br>除了单词边界</p><p><strong>量词</strong><br>通过量词可以设置一个内容出现的次数<br>量词只对它前边的一个内容起作用<br>{n} 正好出现n次<br>{m,n} 出现mn次<br>{m,} m次以上</p><p>+至少一个，相当于{1,}<br>*个或多个，相当于{0,}<br>? 0个或1个，相当于{0,1}</p><p><strong>边界表达式</strong>（不要在java中用，javaScript中用）<br>^:正则开始<br>$:正则结束 ：<strong>注意结束前一个才是结束匹配</strong></p><pre class="line-numbers language-none"><code class="language-none">reg = /^a/;  reg = /b$/;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h2><p>test()<br>可以用来检查一个字符串是否符合正则表达式<br>如果符合返回true，否则返回false<br>例子</p><p>去掉两端的空格:</p><pre class="line-numbers language-none"><code class="language-none">var s = "        f    afa    ";   s = s.replace(/^\s*|\s*$/g,"");  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>Document Object Model<br>文档对象模型，通过DOM可以来任意来修改网页中各个内容<br>文档<br>文档指的是网页，一个网页就是一个文档<br>对象<br>对象指将网页中的每一个节点都转换为对象<br>转换完对象以后，就可以以一种纯面向对象的形式来操作网页了<br>模型<br>模型用来表示节点和节点之间的关系，方便操作页面<br>节点（Node）<br>节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点<br>虽然都是节点，但是节点的类型却是不同的<br>常用的节点<br>文档节点 （Document），代表整个网页<br>元素节点（Element），代表网页中的标签<br>属性节点（Attribute），代表标签中的属性<br>文本节点（Text），代表网页中的文本内容</p><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p>DOM查询<br>在网页中浏览器已经为我们提供了<strong>document对象</strong>，<br><strong>它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。</strong><br>document查询方法：<br>根据元素的id属性查询一个元素节点对象：<br>document.getElementById(“id属性值”);<br>根据元素的name属性值查询一组元素节点对象:<br>document.getElementsByName(“name属性值”);<br>根据标签名来查询一组元素节点对象：<br>document.getElementsByTagName(“标签名”);</p><p>元素的属性：<br><strong>读取元素的属性：</strong><br>语法：元素.属性名<br>例子：ele.name<br>ele.id<br>ele.value<br>ele.className<br>注意：class属性不能采用这种方式，<br><strong>读取class属性时需要使用 元素.classNam</strong>e</p><p>修改元素的属性：<br>语法：元素.属性名 = 属性值</p><p>innerHTML<br>使用该属性可以获取或设置元素内部的HTML代码</p><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p>事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br>我们可以为事件来绑定回调函数来响应事件。<br>绑定事件的方式：<br>1.可以在标签的事件属性中设置相应的JS代码<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;button onclick="js代码。。。"&gt;按钮&lt;/button&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;button id="btn"&gt;按钮&lt;/button&gt;  &lt;script&gt;      var btn = document.getElementById("btn");      btn.onclick = function(){        };  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文档的加载<br>浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。<br>如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，<br>此时将会无法正常获取到DOM对象，导致DOM操作失败。<br>解决方式一：<br>可以将js代码编写到body的下边</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;button id="btn"&gt;按钮&lt;/button&gt;    &lt;script&gt;  var btn = document.getElementById("btn");  btn.onclick = function(){    };  &lt;/script&gt;  &lt;/body&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方式二：<br>将js代码编写到window.onload = function(){}中<br>window.onload 对应的回调函数会在整个页面加载完毕以后才执行，<br>所以可以确保代码执行时，DOM对象已经加载完毕了</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;      window.onload = function(){          var btn = document.getElementById("btn");          btn.onclick = function(){          };      };  &lt;/script&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h2><p>通过具体的元素节点来查询<br>元素.getElementsByTagName()<br>通过标签名查询当前元素的指定后代元素</p><p><strong>子节点包括便签元素中的文本，子元素自包含标签元素</strong></p><p>元素.childNodes<br>获取当前元素的<strong>所有子节点</strong><br><strong>会获取到空白的文本子节点</strong></p><p>childNodes属性会获取包括文本节点在呢的所有节点<br>根据DOM标签标签间空白也会当成文本节点<br>注意：在IE8及以下的浏览器中，不会将空白文本当成子节点，<br>所以该属性在IE8中会返回4个子元素而其他浏览器是9个</p><p>元素.children<br>获取当前元素的<strong>所有子元素</strong></p><p>元素.firstChild<br>获取当前元素的<strong>第一个子节点</strong>，会获取到空白的文本子节点</p><p>元素.lastChild<br>获取当前元素的<strong>最后一个子节点</strong></p><p>元素.parentNode<br>获取当前元素的父元素</p><p>元素.previousSibling<br>获取当前元素的前一个兄弟节点</p><p>previousElementSibling获取前一个兄弟元素，IE8及以下不支持</p><p>元素.nextSibling<br>获取当前元素的后一个兄弟节点</p><p>firstElementChild获取当前元素的第一个子元素<br>firstElementChild不支持IE8及以下的浏览器，<br>如果需要兼容他们尽量不要使用</p><p>innerHTML和innerText<br>这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性<br>两个属性作用类似，都可以获取到标签内部的内容，<br><strong>不同是innerHTML会获取到html标签，而innerText会自动去除标签</strong><br>如果使用这两个属性来设置标签内部的内容时，没有任何区别的</p><p><strong>读取标签内部的文本内容</strong></p><p>h1中的文本内容</p><p>元素.firstChild.nodeValue</p><h2 id="document对象的其他的属性和方法"><a href="#document对象的其他的属性和方法" class="headerlink" title="document对象的其他的属性和方法"></a>document对象的其他的属性和方法</h2><p>document.all<br><strong>获取页面中的所有元素</strong>，相当于document.getElementsByTagName(“*”);</p><p>document.documentElement<br><strong>获取页面中html根元素</strong></p><p>document.body<br>获取页面中的body元素</p><p>document.getElementsByClassName()<br><strong>根据元素的class属性值查询一组元素节点对象</strong><br>这个方法不支持IE8及以下的浏览器</p><p>document.querySelector()<br><strong>根据CSS选择器去页面中查询一个元素</strong><br>如果匹配到的元素有多个，则它会返回查询到的第一个元素</p><p>document.querySelectorAll()<br>根据CSS选择器去页面中查询一组元素<br>会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个</p><h2 id="DOM修改"><a href="#DOM修改" class="headerlink" title="DOM修改"></a>DOM修改</h2><p>document.createElement(“TagName”)<br>可以用于创建一个元素节点对象，<br>它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，<br>并将创建好的对象作为返回值返回<br>document.createTextNode(“textContent”)<br>可以根据文本内容创建一个文本节点对象</p><p><strong>父节点.appendChild(子节点)</strong><br>向父节点中添加指定的子节点<br><strong>父节点.insertBefore(新节点,旧节点)</strong><br>将一个新的节点插入到旧节点的前边<br>父节点.replaceChild(新节点,旧节点)<br>使用一个新的节点去替换旧节点</p><p><strong>父节点.removeChild(子节点)</strong><br>删除指定的子节点<br>推荐方式：<strong>子节点.parentNode.removeChild(子节点)</strong></p><p><strong>以上方法，实际就是改变了相应元素（标签）的innerHTML的值。</strong></p><pre class="line-numbers language-none"><code class="language-none">myClick("btn07",function(){      //向city中添加广州      var city = document.getElementById("city");        /*  * 使用innerHTML也可以完成DOM的增删改的相关操作  * 一般我们会两种方式结合使用  */      //city.innerHTML += "&lt;li&gt;广州&lt;/li&gt;";        //创建一个li      var li = document.createElement("li");      //向li中设置文本      li.innerHTML = "广州";      //将li添加到city中      city.appendChild(li);    });  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM对CSS的操作"><a href="#DOM对CSS的操作" class="headerlink" title="DOM对CSS的操作"></a>DOM对CSS的操作</h2><h3 id="读取和修改内联样式"><a href="#读取和修改内联样式" class="headerlink" title="读取和修改内联样式"></a>读取和修改内联样式</h3><p>使用style属性来操作元素的内联样式<br>读取内联样式：<br>语法：元素.style.样式名<br>例子：<br>元素.style.width<br>元素.style.height<br>注意：<strong>如果样式名中带有-，则需要将样式名修改为驼峰命名法将-去掉，然后后的字母改大写</strong><br>比如：backgroundcolor &gt; backgroundColor<br>borderwidth &gt; borderWidth<br>修改内联样式：<br>语法：元素.style.样式名 = 样式值<br><strong>通过style修改和读取的样式都是内联样式</strong>，由于内联样式的优先级比较高，<br>所以我们通过JS来修改的样式，往往会立即生效，<br><strong>但是如果样式中设置了!important，则内联样式将不会生效。</strong></p><h3 id="读取元素的当前样式"><a href="#读取元素的当前样式" class="headerlink" title="读取元素的当前样式"></a>读取元素的当前样式</h3><p>正常浏览器<br><strong>使用getComputedStyle()</strong><br>这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式<br>参数：<br>1.要获取样式的元素<br>2.可以传递一个伪元素，一般传null<br>例子：<br>获取元素的宽度<br>getComputedStyle(box , null)[“width”];<br>通过该方法读取到样式都是只读的不能修改</p><p>IE8<br><strong>使用currentStyle</strong><br>语法：<br>元素.currentStyle.样式名<br>例子：<br>box.currentStyle[“width”]<br>通过这个属性读取到的样式是只读的不能修改</p><p><strong>实现兼容性</strong></p><p>//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错</p><pre class="line-numbers language-none"><code class="language-none">/*  * 定义一个函数，用来获取指定元素的当前的样式  * 参数：  * obj 要获取样式的元素  * name 要获取的样式名  */  function getStyle(obj , name){  //对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错      if(window.getComputedStyle){          //正常浏览器的方式，具有getComputedStyle()方法          return getComputedStyle(obj , null)[name];      }else{          //IE8的方式，没有getComputedStyle()方法          return obj.currentStyle[name];      }      //return window.getComputedStyle?getComputedStyle(obj , null)[name]:obj.currentStyle[name];  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他的样式相关的属性"><a href="#其他的样式相关的属性" class="headerlink" title="其他的样式相关的属性"></a>其他的样式相关的属性</h3><p>注意：以下样式都是只读的,未指明偏移量都是相对于当前窗口左上角</p><p>clientHeight<br>元素的可见高度，包括元素的内容区和内边距的高度<br>clientWidth<br>元素的可见宽度，包括元素的内容区和内边距的宽度<br>offsetHeight<br>整个元素的高度，包括内容区、内边距、边框<br>offfsetWidth<br>整个元素的宽度，包括内容区、内边距、边框<br>offsetParent<br>当前元素的定位父元素<br>离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body<br>offsetLeft<br>offsetTop<br>当前元素和定位父元素之间的偏移量<br>offsetLeft水平偏移量 offsetTop垂直偏移量</p><p>scrollHeight<br>scrollWidth<br>获取元素滚动区域的高度和宽度</p><p>scrollTop<br>scrollLeft<br>获取元素垂直和水平滚动条滚动的距离</p><p>判断滚动条是否滚动到底<br>垂直滚动条<br>scrollHeight -scrollTop = clientHeight</p><p>水平滚动<br>scrollWidth -scrollLeft = clientWidth</p><h1 id="事件（Event）-1"><a href="#事件（Event）-1" class="headerlink" title="事件（Event）"></a>事件（Event）</h1><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。。</p><p>可以在响应函数中定义一个形参，来使用事件对象，但是在IE8以下浏览器中事件对象没有做完实参传递，而是作为window对象的属性保存</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">元素.事件 = function(event){      event = event || window.event;  };    元素.事件 = function(e){  e = e || event;    };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取到鼠标的坐标</strong><br>clientX和clientY<br>用于获取鼠标在当前的可见窗口的坐标<br>div的偏移量，是相对于整个页面的</p><p>pageX和pageY 可以获取鼠标相对于当前页面的坐标<br>但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用<br>var left = event.clientX;<br>var　top = event.clientY;</p><h2 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h2><p>事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。<br>事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br><strong>可以将事件对象的cancelBubble设置为true，即可取消冒泡</strong><br>例子：</p><pre class="line-numbers language-none"><code class="language-none">元素.事件 = function(event){      event = event || window.event;      event.cancelBubble = true;  };  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h2><p>指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。</p><p>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能</p><p>我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的<br>我们可以尝试将其绑定给元素的共同的祖先元素</p><p><strong>target</strong> : event中的target表示的触发事件的对象</p><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>addEventListener()<br>通过这个方法也可以为元素绑定响应函数<br>参数：<br>1.事件的字符串，不要on<br>2.回调函数，当事件触发时该函数会被调用<br>3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</p><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，<br>这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</p><p>这个方法不支持IE8及以下的浏览器</p><pre class="line-numbers language-none"><code class="language-none">btn01.addEventListener("click",function(){  alert(1);  },false);    btn01.addEventListener("click",function(){  alert(2);  },false);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>attachEvent()</p><p>在IE8中可以使用attachEvent()来绑定事件<br>参数：<br>1.事件的字符串，要on<br>2.回调函数</p><p>这个方法也可以同时为一个事件绑定多个处理函数，<br>不同的是它是后绑定先执行，执行顺序和addEventListener()相反</p><pre class="line-numbers language-none"><code class="language-none">btn01.attachEvent("onclick",function(){  alert(1);  });    btn01.attachEvent("onclick",function(){  alert(2);  });  //定义一个函数，用来为指定元素绑定响应函数  /*   * addEventListener()中的this，是绑定事件的对象   * attachEvent()中的this，是window   *  需要统一两个方法this   */  /*   * 参数：   * obj 要绑定事件的对象   * eventStr 事件的字符串(不要on)   *  callback 回调函数   */  function bind(obj , eventStr , callback){      if(obj.addEventListener){          //大部分浏览器兼容的方式          obj.addEventListener(eventStr , callback , false);      }else{          /*   * this是谁由调用方式决定   * callback.call(obj)   */          //IE8及以下          obj.attachEvent("on"+eventStr , function(){              //在匿名函数中调用回调函数              callback.call(obj);          });      }  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><p>关于事件的传播网景公司和微软公司有不同的理解<br>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，<br>然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。<br>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，<br>然后在向内传播给后代元素<br>W3C综合了两个公司的方案，将事件传播分成了三个阶段<br>1.捕获阶段<br>在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件<br>2.目标阶段<br>事件捕获到目标元素，捕获结束开始在目标元素上触发事件<br>3.冒泡阶段<br>事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</p><p>如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<br>一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false</p><p>IE8及以下的浏览器中没有捕获阶段</p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>拖拽事件</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;      &lt;html&gt;      &lt;head&gt;      &lt;meta charset="UTF-8"&gt;          &lt;title&gt;&lt;/title&gt;  &lt;style type="text/css"&gt;        #box1{  width: 100px;  height: 100px;  background-color: red;  position: absolute;  }    #box2{  width: 100px;  height: 100px;  background-color: yellow;  position: absolute;    left: 200px;  top: 200px;  }        &lt;/style&gt;    &lt;script type="text/javascript"&gt;        window.onload = function(){      /*   * 拖拽box1元素   *  - 拖拽的流程   * 1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown   * 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove   * 3.当鼠标松开时，被拖拽元素固定在当前位置onmouseup   */        //获取box1      var box1 = document.getElementById("box1");      var box2 = document.getElementById("box2");      var img1 = document.getElementById("img1");        //开启box1的拖拽      drag(box1);      //开启box2的      drag(box2);        drag(img1);    };    /*   * 提取一个专门用来设置拖拽的函数   * 参数：开启拖拽的元素   */  function drag(obj){      //当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown      obj.onmousedown = function(event){            //设置box1捕获所有鼠标按下的事件          /*   * setCapture()   * - 只有IE支持，但是在火狐中调用时不会报错，   * 而如果使用chrome调用，会报错   */          /*if(box1.setCapture){  box1.setCapture();  }*/          obj.setCapture &amp;&amp; obj.setCapture();              event = event || window.event;          //div的偏移量 鼠标.clentX - 元素.offsetLeft          //div的偏移量 鼠标.clentY - 元素.offsetTop          var ol = event.clientX - obj.offsetLeft;          var ot = event.clientY - obj.offsetTop;              //为document绑定一个onmousemove事件          document.onmousemove = function(event){              event = event || window.event;              //当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove              //获取鼠标的坐标              var left = event.clientX - ol;              var top = event.clientY - ot;                //修改box1的位置              obj.style.left = left+"px";              obj.style.top = top+"px";            };            //为document绑定一个鼠标松开事件          document.onmouseup = function(){              //当鼠标松开时，被拖拽元素固定在当前位置onmouseup              //取消document的onmousemove事件              document.onmousemove = null;              //取消document的onmouseup事件              document.onmouseup = null;              //当鼠标松开时，取消对事件的捕获              obj.releaseCapture &amp;&amp; obj.releaseCapture();          };     /*  * 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，  * 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，  * 如果不希望发生这个行为，则可以通过return false来取消默认行为  *   * 但是这招对IE8不起作用  */          return false;      };  }      &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;        我是一段文字    &lt;div id="box1"&gt;&lt;/div&gt;    &lt;div id="box2"&gt;&lt;/div&gt;    &lt;img src="img/an.jpg" id="img1" style="position: absolute;"/&gt;      &lt;/body&gt;  &lt;/html&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚轮事件：</p><p>onwheel都支持</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;      &lt;html&gt;      &lt;head&gt;      &lt;meta charset="UTF-8"&gt;          &lt;title&gt;&lt;/title&gt;  &lt;style type="text/css"&gt;        #box1{  width: 100px;  height: 100px;  background-color: red;  }        &lt;/style&gt;  &lt;script type="text/javascript"&gt;        window.onload = function(){          //获取id为box1的div      var box1 = document.getElementById("box1");        //为box1绑定一个鼠标滚轮滚动的事件      /*   * onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，   * 但是火狐不支持该属性   *    * 在火狐中需要使用 DOMMouseScroll 来绑定滚动事件   * 注意该事件需要通过addEventListener()函数来绑定   */          box1.onmousewheel = function(event){            event = event || window.event;              //event.wheelDelta 可以获取鼠标滚轮滚动的方向          //向上滚 120   向下滚 -120          //wheelDelta这个值我们不看大小，只看正负            //alert(event.wheelDelta);            //wheelDelta这个属性火狐中不支持          //在火狐中使用event.detail来获取滚动的方向          //向上滚 -3  向下滚 3          //alert(event.detail);              /*   * 当鼠标滚轮向下滚动时，box1变长   * 当滚轮向上滚动时，box1变短   */          //判断鼠标滚轮滚动的方向          if(event.wheelDelta &gt; 0 || event.detail &lt; 0){              //向上滚，box1变短              box1.style.height = box1.clientHeight - 10 + "px";            }else{              //向下滚，box1变长              box1.style.height = box1.clientHeight + 10 + "px";          }            /*   * 使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false   * 需要使用event来取消默认行为event.preventDefault();   * 但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错   */          event.preventDefault &amp;&amp; event.preventDefault();              /*   * 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，   * 这是浏览器的默认行为，如果不希望发生，则可以取消默认行为   */          return false;              };        //为火狐绑定滚轮事件      bind(box1,"DOMMouseScroll",box1.onmousewheel);      };      function bind(obj , eventStr , callback){      if(obj.addEventListener){          //大部分浏览器兼容的方式          obj.addEventListener(eventStr , callback , false);      }else{          /*   * this是谁由调用方式决定   * callback.call(obj)   */          //IE8及以下          obj.attachEvent("on"+eventStr , function(){              //在匿名函数中调用回调函数              callback.call(obj);          });      }  }    &lt;/script&gt;  &lt;/head&gt;  &lt;body style="height: 2000px;"&gt;        &lt;div id="box1"&gt;&lt;/div&gt;    &lt;/body&gt;  &lt;/html&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件：<br>onkeydown<br>按键被按下<br>对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发<br>当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。<br>onkeyup<br>按键被松开</p><p>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</p><p>keyCode</p><p>可以通过keyCode来获取按键的编码<br>通过它可以判断哪个按键被按下<br>除了keyCode，事件对象中还提供了几个属性<br>altKey<br>ctrlKey<br>shiftKey<br>这个三个用来判断alt ctrl 和 shift是否被按下<br>如果按下则返回true，否则返回false</p><pre class="line-numbers language-none"><code class="language-none">//console.log(event.keyCode);    //判断一个y是否被按下  //判断y和ctrl是否同时被按下  if(event.keyCode === 89 &amp;&amp; event.ctrlKey){  console.log("ctrl和y都被按下了");  }  input.onkeydown = function(event) {      event = event || window.event;      //数字 48 - 57      //使文本框中不能输入数字      if(event.keyCode &gt;= 48 &amp;&amp; event.keyCode &lt;= 57) {          //在文本框中输入内容，属于onkeydown的默认行为          //如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中          return false;      }  };    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>浏览器对象模型(browser object model)<br>BOM可以使我们通过JS来操作浏览器<br>在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br>BOM对象<br>Window<br>代表的是整个浏览器的窗口，同时window也是网页中的全局对象<br>Navigator<br>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>Location<br>代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br>History<br>代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页<br>而且该操作只在当次访问时有效<br>Screen<br>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</p><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，<br>可以通过window对象来使用，也可以直接使用</p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了<br>一般我们只会使用userAgent来判断浏览器的信息，<br>userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，<br>不同的浏览器会有不同的userAgent</p><p>火狐的userAgent<br>Mozilla5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko20100101 Firefox50.0</p><p>Chrome的userAgent<br>Mozilla5.0 (Windows NT 6.1; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Chrome52.0.2743.82 Safari537.36</p><p>IE8<br>Mozilla4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE9<br>Mozilla5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE10<br>Mozilla5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE11<br>Mozilla5.0 (Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko<br>在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了</p><pre class="line-numbers language-none"><code class="language-none">alert(navigator.appName);    var ua = navigator.userAgent;    console.log(ua);    if(firefoxi.test(ua)){  alert("你是火狐！！！");  }else if(chromei.test(ua)){  alert("你是Chrome");  }else if(msiei.test(ua)){  alert("你是IE浏览器~~~");  }else if("ActiveXObject" in window){  alert("你是IE11，枪毙了你~~~");  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>对象可以用来操作浏览器向前或向后翻页<br>length<br>属性，可以获取到当成访问的链接数量<br>back()<br>可以用来回退到上一个页面，作用和浏览器的回退按钮一样<br>forward()<br>可以跳转下一个页面，作用和浏览器的前进按钮一样<br>go()<br>可以用来跳转到指定的页面<br>它需要一个整数作为参数<br>1:表示向前跳转一个页面 相当于forward()<br>2:表示向前跳转两个页面<br>-1:表示向后跳转一个页面<br>-2:表示向后跳转两个页面</p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p>该对象中封装了浏览器的地址栏的信息<br>如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）<br>alert(location);<br>如果直接将location属性修改为一个完整的路径，或相对路径<br>则我们页面会自动跳转到该路径，并且会生成相应的历史记录<br>location = “http:<a href="http://www.baidu.com/">www.baidu.com</a>“;<br>location = “01.BOM.html”;<br>assign()<br>用来跳转到其他的页面，作用和直接修改location一样<br>reload()<br>用于重新加载当前页面，作用和刷新按钮一样<br>如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面<br>location.reload(true);<br>replace()<br>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面<br>不会生成历史记录，不能使用回退按钮回退</p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><strong>setInterval()</strong><br>定时调用<br>可以将一个函数，每隔一段时间执行一次<br>参数：<br>1.回调函数，该函数会每隔一段时间被调用一次<br>2.每次调用间隔的时间，单位是毫秒</p><p>返回值：<br>返回一个Number类型的数据<br>这个数字用来作为定时器的唯一标识<br><strong>clearInterval()可以用来关闭一个定时器</strong><br>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器</p><p>clearInterval()可以接收任意参数，<br>如果参数是一个有效的定时器的标识，则停止对应的定时器<br>如果参数不是一个有效的标识，则什么也不做</p><pre class="line-numbers language-none"><code class="language-none">var num = 1;  var timer = setInterval(function() {  count.innerHTML = num++;  if(num == 11) {  //关闭定时器  clearInterval(timer);  }  }, 1000);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h3><p><strong>setTimeout</strong></p><p>延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次<br>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次<br>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择</p><p>var timer = setTimeout(function(){<br>console.log(num++);<br>},3000);</p><p>使用clearTimeout()来关闭一个延时调用<br>clearTimeout(timer);</p><p>#类的操作</p><p><strong>直接修改元素的类css：</strong></p><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面。 这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便 我希望一行代码，可以同时修改多个样式</p><p>我们可以通过修改元素的class属性来间接的修改样式.这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，<br>并且这种方式，可以使表现和行为进一步的分离</p><pre class="line-numbers language-none"><code class="language-none">box.className += " b2";//注意有空格，添加class属性  //定义一个函数，用来向一个元素中添加指定的class属性值  /*   * 参数:   * obj 要添加class属性的元素   *  cn 要添加的class值   *    */  function addClass(obj, cn) {  if (!hasClass(obj, cn)) {  obj.className += " " + cn;  }  }  /*   * 判断一个元素中是否含有指定的class属性值   * 如果有该class，则返回true，没有则返回false   *    */  function hasClass(obj, cn) {  var reg = new RegExp("\\b" + cn + "\\b");  return reg.test(obj.className);  }  /*   * 删除一个元素中的指定的class属性   */  function removeClass(obj, cn) {  //创建一个正则表达式  var reg = new RegExp("\\b" + cn + "\\b");  //删除class  obj.className = obj.className.replace(reg, "");  }  /*   * toggleClass可以用来切换一个类   * 如果元素中具有该类，则删除   * 如果元素中没有该类，则添加   */  function toggleClass(obj , cn){  //判断obj中是否含有cn  if(hasClass(obj , cn)){  //有，则删除  removeClass(obj , cn);  }else{  //没有，则添加  addClass(obj , cn);  }  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><strong>JavaScript Object Notation</strong> JS对象表示法</p><h2 id="JSON-格式"><a href="#JSON-格式" class="headerlink" title="JSON 格式"></a>JSON 格式</h2><ol><li>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</li><li>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和<code>null</code>（不能使用<code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>和<code>undefined</code>）。</li><li>字符串<strong>必须使用双引号表示</strong>，不能使用单引号。</li><li>对象的键名必须放在双引号里面。</li><li>数组或对象最后一个成员的后面，不能加逗号。</li></ol><p>JS中的对象只有JS自己认识，其他的语言都不认识<br><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别，<br>并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互<br>JSON和JS对象的格式一样，只不过<strong>JSON字符串中的属性名必须加双引号</strong><br>其他的和JS语法一致<br>JSON分类：<br>1.对象 {}<br>2.数组 []</p><p>JSON中允许的值：<br>1.字符串<br>2.数值<br>3.布尔值<br>4.null<br>5.对象<br>6.数组</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">var arr = '[1,2,3,"hello",true]';    var obj2 = '{"arr":[1,2,3]}';    var arr2 ='[{"name":"孙悟空","age":18,"gender":"男"},{"name":"孙悟空","age":18,"gender":"男"}]';  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSON工具类</p><p>json &gt; js对象<br>JSON.parse()<br>可以将以JSON字符串转换为js对象<br>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p>var o = JSON.parse(json);<br>var o2 = JSON.parse(arr);</p><p>var obj3 = {name:”猪八戒” , age:28 , gender:”男”};</p><p>JS对象 &gt; JSON<br>JSON.stringify() -ify/fy，表示”使……化。<br>可以将一个JS对象转换为JSON字符串<br>需要一个js对象作为参数，会返回一个JSON字符串</p><p>var str = JSON.stringify(obj3);<br>console.log(str);</p><p>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a>；其存储的数据能在跨浏览器会话保留。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>eval()<br>这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回<br>如果使用eval()执行的字符串中含有{},它会将{}当成是代码块<br>如果不希望将其当成代码块解析，则需要在字符串前后各加一个()</p><p>eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，<br>但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患</p><pre class="line-numbers language-none"><code class="language-none">var str = '{"name":"孙悟空","age":18,"gender":"男"}';  var obj = eval("("+str+")");  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;  &lt;html&gt;  &lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;title&gt;&lt;/title&gt;  &lt;script type="text/javascript"&gt;    /*   * 在字符串中使用转义字符输入Unicode编码   * \u四位编码   */  console.log("\u2620");  &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;!--在网页中使用Unicode编码  &amp;#编码; 这里的编码需要的是10进制  --&gt;  &lt;h1 style="font-size: 200px;"&gt;&amp;#9760;&lt;/h1&gt;  &lt;h1 style="font-size: 200px;"&gt;&amp;#9856;&lt;/h1&gt;  &lt;/body&gt;  &lt;/html&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>confirm()用于弹出一个带有确认和取消按钮的提示框<br>需要一个字符串作为参数，该字符串将会作为提示文字显示出来<br>如果用户点击确认则会返回true，如果点击取消则返回false<br>var flag = confirm(“确认删除”+name+”吗?”);</p><h2 id="原生js"><a href="#原生js" class="headerlink" title="# 原生js"></a># 原生js</h2><h2 id="原生js实现复制内容到剪切板"><a href="#原生js实现复制内容到剪切板" class="headerlink" title="原生js实现复制内容到剪切板"></a>原生js实现复制内容到剪切板</h2><pre class="line-numbers language-none"><code class="language-none">copy() {      const input = document.createElement("input");      document.body.appendChild(input);      input.setAttribute("value",this.solution.code);      input.select();      if (document.execCommand("copy")) {          document.execCommand("copy");          // console.log("复制成功");      }      document.body.removeChild(input);  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫长而又快</title>
      <link href="posts/405df2f9.html"/>
      <url>posts/405df2f9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经过几天的折腾，终于有了一点进展，雏形已经出来了，剩下的就是需要修改的部分。<br>恍惚几天就过去了，才发现走了许多弯路，如果自己不过于追寻那样的主题，也许很快就搭建完了。<br>可是我没有，<br>但在今后，我得抓紧打基础，一步一个脚印的走，向更远奔跑。<br>不能钻牛角尖，学会放手，过段时间再去研究，可能就有不同的效果。<br>沉稳，冷静，细心。<br>加油！</p><hr><p>希望和悲伤，都是一缕光。</p><hr>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feel </tag>
            
            <tag> 感受 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
